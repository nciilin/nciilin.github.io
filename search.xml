<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2019/11/28/api/index/"/>
      <url>/2019/11/28/api/index/</url>
      
        <content type="html"><![CDATA[{"ret":true,"data":{"swiperList":[{"id":"0001","imgUrl":"http://mp-piao-admincp.qunarzz.com/mp_piao_admin_mp_piao_admin/admin/201911/14c86b17f55e4b639776b497178f8ef7.jpg_750x200_0d6b121a.jpg"},{"id":"0002","imgUrl":"http://mp-piao-admincp.qunarzz.com/mp_piao_admin_mp_piao_admin/admin/201910/e7eac5a5e99e6517c61b953c0fece63b.jpg_750x200_4b701cf8.jpg"},{"id":"0003","imgUrl":"http://mp-piao-admincp.qunarzz.com/mp_piao_admin_mp_piao_admin/admin/201910/93341e649f791afb7d86a4c6c8de0061.jpeg_750x200_d728522a.jpeg"},{"id":"0004","imgUrl":"http://mp-piao-admincp.qunarzz.com/mp_piao_admin_mp_piao_admin/admin/20193/b23a39921e8b78f38b61412d691d93ea.jpg_750x200_942ed7bd.jpg"}],"iconList":[{"id":"0001","imgUrl":"http://img1.qunarzz.com/piao/fusion/1803/95/f3dd6c383aeb3b02.png","desc":"景点门票"},{"id":"0002","imgUrl":"http://img1.qunarzz.com/piao/fusion/1804/ff/fdf170ee89594b02.png","desc":"深圳必游"},{"id":"0003","imgUrl":"http://img1.qunarzz.com/piao/fusion/1803/4d/a1eda1a2b8414302.png","desc":"夜场狂欢"},{"id":"0004","imgUrl":"http://img1.qunarzz.com/piao/fusion/1803/50/26ffa31b56646402.png","desc":"海洋馆"},{"id":"0005","imgUrl":"http://img1.qunarzz.com/piao/fusion/1803/ab/6f7d6e44963c9302.png","desc":"泡温泉"},{"id":"0006","imgUrl":"http://mp-piao-admincp.qunarzz.com/mp_piao_admin_mp_piao_admin/admin/20194/cba147cf6cfcea7109d0bff6aac6f626.png","desc":"深圳动物园"},{"id":"0007","imgUrl":"http://img1.qunarzz.com/piao/fusion/1803/a6/6d97515091789602.png","desc":"世界之窗"},{"id":"0008","imgUrl":"http://img1.qunarzz.com/piao/fusion/1803/b6/37560ece9c62b502.png","desc":"东部华侨城"},{"id":"0009","imgUrl":"http://img1.qunarzz.com/piao/fusion/1804/5a/13ceb38dcf262f02.png","desc":"一日游"},{"id":"0010","imgUrl":"http://img1.qunarzz.com/piao/fusion/1803/b1/528a9e80403b8c02.png","desc":"玩转长隆"}],"recommendList":[{"id":"0001","imgUrl":"http://img1.qunarzz.com/sight/p0/1508/2e/d9363ce50a88c8c5ff5a138c67687cd4.water.jpg_200x200_1c15c8f5.jpg","title":"深圳野生动物园","desc":"深圳市野生动物园有限公司是中国第一家放养式的野生动物园","address":"南山区"},{"id":"0002","imgUrl":"http://img1.qunarzz.com/sight/p0/1911/6c/6c31c4988aade7aba3.water.jpg_200x200_fe5c186f.jpg","title":"深圳欢乐谷","desc":"深圳欢乐谷是华侨城集团新一代大型主题乐园，首批国家AAAAA级旅游景区，占地面积35万平方米，总投资20亿元人民币，是 一座融参与性、观赏性、娱乐性、趣味性于一体的中国现代主题乐园。","address":"南山区"},{"id":"0003","imgUrl":"http://img1.qunarzz.com/sight/p0/1902/f2/f2e0213052717f7ca3.water.jpg_200x200_816c1b48.jpg","title":"世界之窗","desc":"世界之窗是香港中旅国际投资有限公司控股、华侨城集团参股的旅游项目。","address":"华侨城"},{"id":"0004","imgUrl":"http://img1.qunarzz.com/sight/p0/201301/16/4593d3d5a27f445b93835fbb.jpg_200x200_2fcb6c78.jpg","title":"东部华侨城大侠谷","desc":"大侠谷生态乐园（又名“大峡谷”）位于深圳东部华侨城，俯瞰深圳东部黄金海岸线，集山地郊野公园和都市主题公园于一体","address":"东部华侨城"},{"id":"0005","imgUrl":"http://img1.qunarzz.com/sight/p0/1603/9d/9d8c0e9a01bba92e90.water.jpg_200x200_86f2e623.jpg","title":"锦绣中华民俗村","desc":"锦绣中华和中国民俗文化村是深圳锦绣中华发展有限公司辖下的两大景区","address":"华侨城"}],"weekendList":[{"id":"0001","imgUrl":"http://img1.qunarzz.com/sight/source/1507/d9/2ddc7652fdba16.jpg_r_640x214_5e62f1a3.jpg","title":"深圳周边游","desc":"远离城市拥堵，去周边开启清新假期吧。"},{"id":"0002","imgUrl":"http://img1.qunarzz.com/sight/source/1811/15/66f14e0fd6fbb.jpg_r_640x214_5d69f21d.jpg","title":"清远周边逛","desc":"人人都有一双发现美的眼睛，身边的事物最熟悉不过，那你可曾发现了被人遗漏的美？"},{"id":"0003","imgUrl":"http://img1.qunarzz.com/sight/source/1811/b8/5d599bbdcf8b57.jpg_r_640x214_2ee055e3.jpg","title":"浮在海上的绿洲","desc":"南国滨海之城，避寒胜地，有暖暖的阳光，海风习习，吃着海鲜逛逛老街多惬意啊"},{"id":"0004","imgUrl":"http://img1.qunarzz.com/sight/source/1505/4a/ac007012d54bd4.jpg_r_640x214_eefa6ade.jpg","title":"惠州打卡圣地","desc":"毓秀山水，继续着四季轮回的交替"},{"id":"0005","imgUrl":"http://img1.qunarzz.com/sight/source/1812/40/678d1e6eb29766.jpg_r_640x214_750d6d68.jpg","title":"惠州亲子长隆","desc":"世界欢乐汇聚长隆，这里拥有多个大型游乐设备和精彩的演出，和小伙伴们一起感受刺激的体验"}]}}]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2019/11/28/api/detail/"/>
      <url>/2019/11/28/api/detail/</url>
      
        <content type="html"><![CDATA[{"ret":true,"data":{"sightName":"深圳野生动物园(AAAA景区)","bannerImg":"http://img1.qunarzz.com/sight/p0/1508/2e/d9363ce50a88c8c5ff5a138c67687cd4.water.jpg_600x330_28bda6b0.jpg","gallaryImgs":["http://img1.qunarzz.com/sight/p0/1508/44/c8fb5daa16f5f99f8201f323426b3516.water.jpg_r_800x800_e7642201.jpg","http://img1.qunarzz.com/sight/p0/1508/79/334ed37d1fa6d6bf9baa0c7296ce4084.water.jpg_r_800x800_9a0660af.jpg"],"categoryList":[{"title":"成人票","price":"228.9"},{"title":"学生票","price":"190"},{"title":"儿童票","price":"140"},{"title":"亲子票","price":"339.1"}]}}]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2019/11/28/api/city/"/>
      <url>/2019/11/28/api/city/</url>
      
        <content type="html"><![CDATA[{"ret":true,"data":{"hotCities":[{"id":1,"spell":"shenzhen","name":"深圳"},{"id":3,"spell":"shanghai","name":"上海"},{"id":47,"spell":"xian","name":"西安"},{"id":239,"spell":"sanya","name":"三亚"},{"id":188,"spell":"lijiang","name":"丽江"},{"id":125,"spell":"guilin","name":"桂林"}],"cities":{"A":[{"id":56,"spell":"aba","name":"阿坝"},{"id":57,"spell":"akesu","name":"阿克苏"},{"id":58,"spell":"alashanmeng","name":"阿拉善盟"},{"id":59,"spell":"aletai","name":"阿勒泰"},{"id":60,"spell":"ali","name":"阿里"},{"id":61,"spell":"ankang","name":"安康"},{"id":62,"spell":"anqing","name":"安庆"},{"id":63,"spell":"anshan","name":"鞍山"},{"id":64,"spell":"anshun","name":"安顺"},{"id":65,"spell":"anyang","name":"安阳"},{"id":338,"spell":"acheng","name":"阿城"},{"id":339,"spell":"anfu","name":"安福"},{"id":340,"spell":"anji","name":"安吉"},{"id":341,"spell":"anning","name":"安宁"},{"id":342,"spell":"anqiu","name":"安丘"},{"id":343,"spell":"anxi","name":"安溪"},{"id":344,"spell":"anyi","name":"安义"},{"id":345,"spell":"anyuan","name":"安远"}],"B":[{"id":1,"spell":"beijing","name":"北京"},{"id":66,"spell":"baicheng","name":"白城"},{"id":67,"spell":"baise","name":"百色"},{"id":68,"spell":"baishan","name":"白山"},{"id":69,"spell":"baiyin","name":"白银"},{"id":70,"spell":"bangbu","name":"蚌埠"},{"id":71,"spell":"baoding","name":"保定"},{"id":72,"spell":"baoji","name":"宝鸡"},{"id":73,"spell":"baoshan","name":"保山"},{"id":74,"spell":"baotou","name":"包头"},{"id":75,"spell":"bayannaoer","name":"巴彦淖尔"},{"id":76,"spell":"bayinguoleng","name":"巴音郭楞"},{"id":77,"spell":"bazhong","name":"巴中"},{"id":78,"spell":"beihai","name":"北海"},{"id":79,"spell":"benxi","name":"本溪"},{"id":80,"spell":"bijie","name":"毕节"},{"id":81,"spell":"binzhou","name":"滨州"},{"id":82,"spell":"boertala","name":"博尔塔拉"},{"id":83,"spell":"bozhou","name":"亳州"},{"id":346,"spell":"baoying","name":"宝应"},{"id":347,"spell":"bayan","name":"巴彦"},{"id":348,"spell":"binhai","name":"滨海"},{"id":349,"spell":"binxian","name":"宾县"},{"id":350,"spell":"binyang","name":"宾阳"},{"id":351,"spell":"bishan","name":"璧山"},{"id":352,"spell":"boai","name":"博爱"},{"id":353,"spell":"boluo","name":"博罗"},{"id":354,"spell":"boxing","name":"博兴"}],"C":[{"id":2,"spell":"chongqing","name":"重庆"},{"id":5,"spell":"changchun","name":"长春"},{"id":6,"spell":"changsha","name":"长沙"},{"id":7,"spell":"changzhou","name":"常州"},{"id":8,"spell":"chengdu","name":"成都"},{"id":84,"spell":"cangzhou","name":"沧州"},{"id":85,"spell":"changde","name":"常德"},{"id":86,"spell":"changdu","name":"昌都"},{"id":87,"spell":"changji","name":"昌吉"},{"id":88,"spell":"changzhi","name":"长治"},{"id":89,"spell":"chaohu","name":"巢湖"},{"id":90,"spell":"chaoyang","name":"朝阳"},{"id":91,"spell":"chaozhou","name":"潮州"},{"id":92,"spell":"chengde","name":"承德"},{"id":93,"spell":"chenzhou","name":"郴州"},{"id":94,"spell":"chifeng","name":"赤峰"},{"id":95,"spell":"chizhou","name":"池州"},{"id":96,"spell":"chongzuo","name":"崇左"},{"id":97,"spell":"chuxiong","name":"楚雄"},{"id":98,"spell":"chuzhou","name":"滁州"},{"id":355,"spell":"cangnan","name":"苍南"},{"id":356,"spell":"cangshan","name":"苍山"},{"id":357,"spell":"caoxian","name":"曹县"},{"id":358,"spell":"changdao","name":"长岛"},{"id":359,"spell":"changfeng","name":"长丰"},{"id":360,"spell":"changhai","name":"长海"},{"id":361,"spell":"changle","name":"长乐"},{"id":362,"spell":"changle","name":"昌乐"},{"id":363,"spell":"changshan","name":"常山"},{"id":364,"spell":"changshu","name":"常熟"},{"id":365,"spell":"changtai","name":"长泰"},{"id":366,"spell":"changting","name":"长汀"},{"id":367,"spell":"changxing","name":"长兴"},{"id":368,"spell":"changyi","name":"昌邑"},{"id":369,"spell":"chaoan","name":"潮安"},{"id":370,"spell":"chenggong","name":"呈贡"},{"id":371,"spell":"chengkou","name":"城口"},{"id":372,"spell":"chengwu","name":"成武"},{"id":373,"spell":"chiping","name":"茌平"},{"id":374,"spell":"chongren","name":"崇仁"},{"id":375,"spell":"chongyi","name":"崇义"},{"id":376,"spell":"chongzhou","name":"崇州"},{"id":377,"spell":"chunan","name":"淳安"},{"id":378,"spell":"cixi","name":"慈溪"},{"id":379,"spell":"conghua","name":"从化"},{"id":380,"spell":"congyang","name":"枞阳"}],"D":[{"id":9,"spell":"dalian","name":"大连"},{"id":10,"spell":"dongguan","name":"东莞"},{"id":99,"spell":"dali","name":"大理"},{"id":100,"spell":"dandong","name":"丹东"},{"id":101,"spell":"daqing","name":"大庆"},{"id":102,"spell":"datong","name":"大同"},{"id":103,"spell":"daxinganling","name":"大兴安岭"},{"id":104,"spell":"dazhou","name":"达州"},{"id":105,"spell":"dehong","name":"德宏"},{"id":106,"spell":"deyang","name":"德阳"},{"id":107,"spell":"dezhou","name":"德州"},{"id":108,"spell":"dingxi","name":"定西"},{"id":109,"spell":"diqing","name":"迪庆"},{"id":110,"spell":"dongying","name":"东营"},{"id":381,"spell":"dafeng","name":"大丰"},{"id":382,"spell":"daishan","name":"岱山"},{"id":383,"spell":"dangshan","name":"砀山"},{"id":384,"spell":"dangtu","name":"当涂"},{"id":385,"spell":"danxian","name":"单县"},{"id":386,"spell":"danyang","name":"丹阳"},{"id":387,"spell":"dapu","name":"大埔"},{"id":388,"spell":"datian","name":"大田"},{"id":389,"spell":"dayi","name":"大邑"},{"id":390,"spell":"dayu","name":"大余"},{"id":391,"spell":"dazu","name":"大足"},{"id":392,"spell":"dean","name":"德安"},{"id":393,"spell":"dehua","name":"德化"},{"id":394,"spell":"dehui","name":"德惠"},{"id":395,"spell":"dengfeng","name":"登封"},{"id":396,"spell":"deqing","name":"德清"},{"id":397,"spell":"deqing","name":"德庆"},{"id":398,"spell":"dexing","name":"德兴"},{"id":399,"spell":"dianbai","name":"电白"},{"id":400,"spell":"dianjiang","name":"垫江"},{"id":401,"spell":"dingnan","name":"定南"},{"id":402,"spell":"dingtao","name":"定陶"},{"id":403,"spell":"dingyuan","name":"定远"},{"id":404,"spell":"donga","name":"东阿"},{"id":405,"spell":"donghai","name":"东海"},{"id":406,"spell":"dongming","name":"东明"},{"id":407,"spell":"dongping","name":"东平"},{"id":408,"spell":"dongshan","name":"东山"},{"id":409,"spell":"dongtai","name":"东台"},{"id":410,"spell":"dongtou","name":"洞头"},{"id":411,"spell":"dongxiang","name":"东乡"},{"id":412,"spell":"dongyang","name":"东阳"},{"id":413,"spell":"dongyuan","name":"东源"},{"id":414,"spell":"dongzhi","name":"东至"},{"id":415,"spell":"duchang","name":"都昌"},{"id":416,"spell":"dujiangyan","name":"都江堰"}],"E":[{"id":111,"spell":"eerduosi","name":"鄂尔多斯"},{"id":112,"spell":"enshi","name":"恩施"},{"id":113,"spell":"ezhou","name":"鄂州"},{"id":417,"spell":"enping","name":"恩平"}],"F":[{"id":11,"spell":"foshan","name":"佛山"},{"id":12,"spell":"fuzhou","name":"福州"},{"id":114,"spell":"fangchenggang","name":"防城港"},{"id":115,"spell":"fushun","name":"抚顺"},{"id":116,"spell":"fuxin","name":"阜新"},{"id":117,"spell":"fuyang","name":"阜阳"},{"id":118,"spell":"fuzhou","name":"抚州"},{"id":418,"spell":"faku","name":"法库"},{"id":419,"spell":"fanchang","name":"繁昌"},{"id":420,"spell":"fangzheng","name":"方正"},{"id":421,"spell":"feicheng","name":"肥城"},{"id":422,"spell":"feidong","name":"肥东"},{"id":423,"spell":"feixi","name":"肥西"},{"id":424,"spell":"feixian","name":"费县"},{"id":425,"spell":"fengcheng","name":"丰城"},{"id":426,"spell":"fengdu","name":"丰都"},{"id":427,"spell":"fenghua","name":"奉化"},{"id":428,"spell":"fengjie","name":"奉节"},{"id":429,"spell":"fengkai","name":"封开"},{"id":430,"spell":"fengshun","name":"丰顺"},{"id":431,"spell":"fengtai","name":"凤台"},{"id":432,"spell":"fengxian","name":"丰县"},{"id":433,"spell":"fengxin","name":"奉新"},{"id":434,"spell":"fengyang","name":"凤阳"},{"id":435,"spell":"fenyi","name":"分宜"},{"id":436,"spell":"fogang","name":"佛冈"},{"id":437,"spell":"fuan","name":"福安"},{"id":438,"spell":"fuding","name":"福鼎"},{"id":439,"spell":"fuliang","name":"浮梁"},{"id":440,"spell":"fumin","name":"富民"},{"id":441,"spell":"funan","name":"阜南"},{"id":442,"spell":"funing","name":"阜宁"},{"id":443,"spell":"fuqing","name":"福清"},{"id":444,"spell":"fuyang","name":"富阳"}],"G":[{"id":13,"spell":"guangzhou","name":"广州"},{"id":14,"spell":"guiyang","name":"贵阳"},{"id":119,"spell":"gannan","name":"甘南"},{"id":120,"spell":"ganzhou","name":"赣州"},{"id":121,"spell":"ganzi","name":"甘孜"},{"id":122,"spell":"guangan","name":"广安"},{"id":123,"spell":"guangyuan","name":"广元"},{"id":124,"spell":"guigang","name":"贵港"},{"id":125,"spell":"guilin","name":"桂林"},{"id":126,"spell":"guoluo","name":"果洛"},{"id":127,"spell":"guyuan","name":"固原"},{"id":445,"spell":"ganxian","name":"赣县"},{"id":446,"spell":"ganyu","name":"赣榆"},{"id":447,"spell":"gaoan","name":"高安"},{"id":448,"spell":"gaocheng","name":"藁城"},{"id":449,"spell":"gaochun","name":"高淳"},{"id":450,"spell":"gaolan","name":"皋兰"},{"id":451,"spell":"gaoling","name":"高陵"},{"id":452,"spell":"gaomi","name":"高密"},{"id":453,"spell":"gaoqing","name":"高青"},{"id":454,"spell":"gaotang","name":"高唐"},{"id":455,"spell":"gaoyao","name":"高要"},{"id":456,"spell":"gaoyi","name":"高邑"},{"id":457,"spell":"gaoyou","name":"高邮"},{"id":458,"spell":"gaozhou","name":"高州"},{"id":459,"spell":"gongyi","name":"巩义"},{"id":460,"spell":"guangchang","name":"广昌"},{"id":461,"spell":"guangde","name":"广德"},{"id":462,"spell":"guangfeng","name":"广丰"},{"id":463,"spell":"guangning","name":"广宁"},{"id":464,"spell":"guangrao","name":"广饶"},{"id":465,"spell":"guangze","name":"光泽"},{"id":466,"spell":"guannan","name":"灌南"},{"id":467,"spell":"guanxian","name":"冠县"},{"id":468,"spell":"guanyun","name":"灌云"},{"id":469,"spell":"guixi","name":"贵溪"},{"id":470,"spell":"gutian","name":"古田"},{"id":471,"spell":"guzhen","name":"固镇"}],"H":[{"id":15,"spell":"haerbin","name":"哈尔滨"},{"id":16,"spell":"haikou","name":"海口"},{"id":17,"spell":"handan","name":"邯郸"},{"id":18,"spell":"hangzhou","name":"杭州"},{"id":19,"spell":"hefei","name":"合肥"},{"id":20,"spell":"huizhou","name":"惠州"},{"id":128,"spell":"haibei","name":"海北"},{"id":129,"spell":"haidong","name":"海东"},{"id":130,"spell":"hainan","name":"海南"},{"id":131,"spell":"haixi","name":"海西"},{"id":132,"spell":"hami","name":"哈密"},{"id":133,"spell":"hanzhong","name":"汉中"},{"id":134,"spell":"hebi","name":"鹤壁"},{"id":135,"spell":"hechi","name":"河池"},{"id":136,"spell":"hegang","name":"鹤岗"},{"id":137,"spell":"heihe","name":"黑河"},{"id":138,"spell":"hengshui","name":"衡水"},{"id":139,"spell":"hengyang","name":"衡阳"},{"id":140,"spell":"hetiandi","name":"和田地"},{"id":141,"spell":"heyuan","name":"河源"},{"id":142,"spell":"heze","name":"菏泽"},{"id":143,"spell":"hezhou","name":"贺州"},{"id":144,"spell":"honghe","name":"红河"},{"id":145,"spell":"huaian","name":"淮安"},{"id":146,"spell":"huaibei","name":"淮北"},{"id":147,"spell":"huaihua","name":"怀化"},{"id":148,"spell":"huainan","name":"淮南"},{"id":149,"spell":"huanggang","name":"黄冈"},{"id":150,"spell":"huangnan","name":"黄南"},{"id":151,"spell":"huangshan","name":"黄山"},{"id":152,"spell":"huangshi","name":"黄石"},{"id":153,"spell":"huhehaote","name":"呼和浩特"},{"id":154,"spell":"huludao","name":"葫芦岛"},{"id":155,"spell":"hulunbeier","name":"呼伦贝尔"},{"id":156,"spell":"huzhou","name":"湖州"},{"id":472,"spell":"haian","name":"海安"},{"id":473,"spell":"haifeng","name":"海丰"},{"id":474,"spell":"haimen","name":"海门"},{"id":475,"spell":"haining","name":"海宁"},{"id":476,"spell":"haiyan","name":"海盐"},{"id":477,"spell":"haiyang","name":"海阳"},{"id":478,"spell":"hanshan","name":"含山"},{"id":479,"spell":"hechuan","name":"合川"},{"id":480,"spell":"hengfeng","name":"横峰"},{"id":481,"spell":"hengxian","name":"横县"},{"id":482,"spell":"heping","name":"和平"},{"id":483,"spell":"heshan","name":"鹤山"},{"id":484,"spell":"hexian","name":"和县"},{"id":485,"spell":"hongze","name":"洪泽"},{"id":486,"spell":"huaan","name":"华安"},{"id":487,"spell":"huadian","name":"桦甸"},{"id":488,"spell":"huaiji","name":"怀集"},{"id":489,"spell":"huaining","name":"怀宁"},{"id":490,"spell":"huaiyuan","name":"怀远"},{"id":491,"spell":"huantai","name":"桓台"},{"id":492,"spell":"huazhou","name":"化州"},{"id":493,"spell":"huian","name":"惠安"},{"id":494,"spell":"huichang","name":"会昌"},{"id":495,"spell":"huidong","name":"惠东"},{"id":496,"spell":"huilai","name":"惠来"},{"id":497,"spell":"huimin","name":"惠民"},{"id":498,"spell":"hukou","name":"湖口"},{"id":499,"spell":"hulan","name":"呼兰"},{"id":500,"spell":"huoqiu","name":"霍邱"},{"id":501,"spell":"huoshan","name":"霍山"},{"id":502,"spell":"huxian","name":"户县"}],"J":[{"id":21,"spell":"jiaozuo","name":"焦作"},{"id":22,"spell":"jiaxing","name":"嘉兴"},{"id":23,"spell":"jilin","name":"吉林"},{"id":24,"spell":"jinan","name":"济南"},{"id":157,"spell":"jiamusi","name":"佳木斯"},{"id":158,"spell":"jiangmen","name":"江门"},{"id":159,"spell":"jian","name":"吉安"},{"id":160,"spell":"jiayuguan","name":"嘉峪关"},{"id":161,"spell":"jieyang","name":"揭阳"},{"id":162,"spell":"jinchang","name":"金昌"},{"id":163,"spell":"jincheng","name":"晋城"},{"id":164,"spell":"jingdezhen","name":"景德镇"},{"id":165,"spell":"jingmen","name":"荆门"},{"id":166,"spell":"jingzhou","name":"荆州"},{"id":167,"spell":"jinhua","name":"金华"},{"id":168,"spell":"jining","name":"济宁"},{"id":169,"spell":"jinzhong","name":"晋中"},{"id":170,"spell":"jinzhou","name":"锦州"},{"id":171,"spell":"jiujiang","name":"九江"},{"id":172,"spell":"jiuquan","name":"酒泉"},{"id":173,"spell":"jixi","name":"鸡西"},{"id":503,"spell":"jiande","name":"建德"},{"id":504,"spell":"jiangdu","name":"江都"},{"id":505,"spell":"jiangjin","name":"江津"},{"id":506,"spell":"jiangle","name":"将乐"},{"id":507,"spell":"jiangshan","name":"江山"},{"id":508,"spell":"jiangyan","name":"姜堰"},{"id":509,"spell":"jiangyin","name":"江阴"},{"id":510,"spell":"jianhu","name":"建湖"},{"id":511,"spell":"jianning","name":"建宁"},{"id":512,"spell":"jianou","name":"建瓯"},{"id":513,"spell":"jianyang","name":"建阳"},{"id":514,"spell":"jian","name":"吉安"},{"id":515,"spell":"jiaohe","name":"蛟河"},{"id":516,"spell":"jiaoling","name":"蕉岭"},{"id":517,"spell":"jiaonan","name":"胶南"},{"id":518,"spell":"jiaozhou","name":"胶州"},{"id":519,"spell":"jiashan","name":"嘉善"},{"id":520,"spell":"jiaxiang","name":"嘉祥"},{"id":521,"spell":"jiedong","name":"揭东"},{"id":522,"spell":"jieshou","name":"界首"},{"id":523,"spell":"jiexi","name":"揭西"},{"id":524,"spell":"jimo","name":"即墨"},{"id":525,"spell":"jingan","name":"靖安"},{"id":526,"spell":"jingde","name":"旌德"},{"id":527,"spell":"jinggangshan","name":"井冈山"},{"id":528,"spell":"jingjiang","name":"靖江"},{"id":529,"spell":"jingning","name":"景宁"},{"id":530,"spell":"jingxian","name":"泾县"},{"id":531,"spell":"jingxing","name":"井陉"},{"id":532,"spell":"jinhu","name":"金湖"},{"id":533,"spell":"jinjiang","name":"晋江"},{"id":534,"spell":"jinmen","name":"金门"},{"id":535,"spell":"jinning","name":"晋宁"},{"id":536,"spell":"jintan","name":"金坛"},{"id":537,"spell":"jintang","name":"金堂"},{"id":538,"spell":"jinxian","name":"进贤"},{"id":539,"spell":"jinxi","name":"金溪"},{"id":540,"spell":"jinxiang","name":"金乡"},{"id":541,"spell":"jinyun","name":"缙云"},{"id":542,"spell":"jinzhai","name":"金寨"},{"id":543,"spell":"jinzhou","name":"晋州"},{"id":544,"spell":"jishui","name":"吉水"},{"id":545,"spell":"jiujiang","name":"九江"},{"id":546,"spell":"jiutai","name":"九台"},{"id":547,"spell":"jixi","name":"绩溪"},{"id":548,"spell":"jiyang","name":"济阳"},{"id":549,"spell":"jiyuan","name":"济源"},{"id":550,"spell":"juancheng","name":"鄄城"},{"id":551,"spell":"junan","name":"莒南"},{"id":552,"spell":"jurong","name":"句容"},{"id":553,"spell":"juxian","name":"莒县"},{"id":554,"spell":"juye","name":"巨野"}],"K":[{"id":25,"spell":"kunming","name":"昆明"},{"id":174,"spell":"kaifeng","name":"开封"},{"id":175,"spell":"kashidi","name":"喀什地"},{"id":176,"spell":"kelamayi","name":"克拉玛依"},{"id":177,"spell":"kezile","name":"克孜勒"},{"id":555,"spell":"kaihua","name":"开化"},{"id":556,"spell":"kaiping","name":"开平"},{"id":557,"spell":"kaixian","name":"开县"},{"id":558,"spell":"kaiyang","name":"开阳"},{"id":559,"spell":"kangping","name":"康平"},{"id":560,"spell":"kenli","name":"垦利"},{"id":561,"spell":"kunshan","name":"昆山"}],"L":[{"id":26,"spell":"lanzhou","name":"兰州"},{"id":27,"spell":"liuzhou","name":"柳州"},{"id":28,"spell":"luoyang","name":"洛阳"},{"id":178,"spell":"laibin","name":"来宾"},{"id":179,"spell":"laiwu","name":"莱芜"},{"id":180,"spell":"langfang","name":"廊坊"},{"id":181,"spell":"lasa","name":"拉萨"},{"id":182,"spell":"leshan","name":"乐山"},{"id":183,"spell":"liangshan","name":"凉山"},{"id":184,"spell":"lianyungang","name":"连云港"},{"id":185,"spell":"liaocheng","name":"聊城"},{"id":186,"spell":"liaoyang","name":"辽阳"},{"id":187,"spell":"liaoyuan","name":"辽源"},{"id":188,"spell":"lijiang","name":"丽江"},{"id":189,"spell":"lincang","name":"临沧"},{"id":190,"spell":"linfen","name":"临汾"},{"id":191,"spell":"linxia","name":"临夏"},{"id":192,"spell":"linyi","name":"临沂"},{"id":193,"spell":"linzhi","name":"林芝"},{"id":194,"spell":"lishui","name":"丽水"},{"id":195,"spell":"liuan","name":"六安"},{"id":196,"spell":"liupanshui","name":"六盘水"},{"id":197,"spell":"longnan","name":"陇南"},{"id":198,"spell":"longyan","name":"龙岩"},{"id":199,"spell":"loudi","name":"娄底"},{"id":200,"spell":"luohe","name":"漯河"},{"id":201,"spell":"luzhou","name":"泸州"},{"id":202,"spell":"lvliang","name":"吕梁"},{"id":562,"spell":"laian","name":"来安"},{"id":563,"spell":"laixi","name":"莱西"},{"id":564,"spell":"laiyang","name":"莱阳"},{"id":565,"spell":"laizhou","name":"莱州"},{"id":566,"spell":"langxi","name":"郎溪"},{"id":567,"spell":"lantian","name":"蓝田"},{"id":568,"spell":"lanxi","name":"兰溪"},{"id":569,"spell":"lean","name":"乐安"},{"id":570,"spell":"lechang","name":"乐昌"},{"id":571,"spell":"leizhou","name":"雷州"},{"id":572,"spell":"leling","name":"乐陵"},{"id":573,"spell":"leping","name":"乐平"},{"id":574,"spell":"leqing","name":"乐清"},{"id":575,"spell":"leting","name":"乐亭"},{"id":576,"spell":"liancheng","name":"连城"},{"id":577,"spell":"liangping","name":"梁平"},{"id":578,"spell":"liangshan","name":"梁山"},{"id":579,"spell":"lianhua","name":"莲花"},{"id":580,"spell":"lianjiang","name":"连江"},{"id":581,"spell":"lianjiang","name":"廉江"},{"id":582,"spell":"liannan","name":"连南"},{"id":583,"spell":"lianping","name":"连平"},{"id":584,"spell":"lianshan","name":"连山"},{"id":585,"spell":"lianshui","name":"涟水"},{"id":586,"spell":"lianzhou","name":"连州"},{"id":587,"spell":"liaozhong","name":"辽中"},{"id":588,"spell":"lichuan","name":"黎川"},{"id":589,"spell":"lijin","name":"利津"},{"id":590,"spell":"linan","name":"临安"},{"id":591,"spell":"lingbi","name":"灵璧"},{"id":592,"spell":"lingshou","name":"灵寿"},{"id":593,"spell":"lingxian","name":"陵县"},{"id":594,"spell":"linhai","name":"临海"},{"id":595,"spell":"linqing","name":"临清"},{"id":596,"spell":"linquan","name":"临泉"},{"id":597,"spell":"linqu","name":"临朐"},{"id":598,"spell":"linshu","name":"临沭"},{"id":599,"spell":"linyi","name":"临邑"},{"id":600,"spell":"lishui","name":"溧水"},{"id":601,"spell":"liucheng","name":"柳城"},{"id":602,"spell":"liujiang","name":"柳江"},{"id":603,"spell":"liuyang","name":"浏阳"},{"id":604,"spell":"lixin","name":"利辛"},{"id":605,"spell":"liyang","name":"溧阳"},{"id":606,"spell":"longan","name":"隆安"},{"id":607,"spell":"longchuan","name":"龙川"},{"id":608,"spell":"longhai","name":"龙海"},{"id":609,"spell":"longkou","name":"龙口"},{"id":610,"spell":"longmen","name":"龙门"},{"id":611,"spell":"longnan","name":"龙南"},{"id":612,"spell":"longquan","name":"龙泉"},{"id":613,"spell":"longyou","name":"龙游"},{"id":614,"spell":"luancheng","name":"栾城"},{"id":615,"spell":"luanchuan","name":"栾川"},{"id":616,"spell":"luannan","name":"滦南"},{"id":617,"spell":"luanxian","name":"滦县"},{"id":618,"spell":"lufeng","name":"陆丰"},{"id":619,"spell":"luhe","name":"陆河"},{"id":620,"spell":"lujiang","name":"庐江"},{"id":621,"spell":"luoding","name":"罗定"},{"id":622,"spell":"luoning","name":"洛宁"},{"id":623,"spell":"luoyuan","name":"罗源"},{"id":624,"spell":"luquan","name":"鹿泉"},{"id":625,"spell":"luquan","name":"禄劝"},{"id":626,"spell":"luxi","name":"芦溪"},{"id":627,"spell":"luzhai","name":"鹿寨"}],"M":[{"id":203,"spell":"maanshan","name":"马鞍山"},{"id":204,"spell":"maoming","name":"茂名"},{"id":205,"spell":"meishan","name":"眉山"},{"id":206,"spell":"meizhou","name":"梅州"},{"id":207,"spell":"mianyang","name":"绵阳"},{"id":208,"spell":"mudanjiang","name":"牡丹江"},{"id":628,"spell":"mashan","name":"马山"},{"id":629,"spell":"meixian","name":"梅县"},{"id":630,"spell":"mengcheng","name":"蒙城"},{"id":631,"spell":"mengjin","name":"孟津"},{"id":632,"spell":"mengyin","name":"蒙阴"},{"id":633,"spell":"mengzhou","name":"孟州"},{"id":634,"spell":"mingguang","name":"明光"},{"id":635,"spell":"mingxi","name":"明溪"},{"id":636,"spell":"minhou","name":"闽侯"},{"id":637,"spell":"minqing","name":"闽清"},{"id":638,"spell":"mulan","name":"木兰"}],"N":[{"id":29,"spell":"nanchang","name":"南昌"},{"id":30,"spell":"nanjing","name":"南京"},{"id":31,"spell":"nanning","name":"南宁"},{"id":32,"spell":"nantong","name":"南通"},{"id":33,"spell":"ningbo","name":"宁波"},{"id":209,"spell":"nanchong","name":"南充"},{"id":210,"spell":"nanping","name":"南平"},{"id":211,"spell":"nanyang","name":"南阳"},{"id":212,"spell":"naqu","name":"那曲"},{"id":213,"spell":"neijiang","name":"内江"},{"id":214,"spell":"ningde","name":"宁德"},{"id":215,"spell":"nujiang","name":"怒江"},{"id":639,"spell":"nanan","name":"南安"},{"id":640,"spell":"nanao","name":"南澳"},{"id":641,"spell":"nancheng","name":"南城"},{"id":642,"spell":"nanchuan","name":"南川"},{"id":643,"spell":"nanfeng","name":"南丰"},{"id":644,"spell":"nanjing","name":"南靖"},{"id":645,"spell":"nankang","name":"南康"},{"id":646,"spell":"nanling","name":"南陵"},{"id":647,"spell":"nanxiong","name":"南雄"},{"id":648,"spell":"ningdu","name":"宁都"},{"id":649,"spell":"ningguo","name":"宁国"},{"id":650,"spell":"ninghai","name":"宁海"},{"id":651,"spell":"ninghua","name":"宁化"},{"id":652,"spell":"ningjin","name":"宁津"},{"id":653,"spell":"ningxiang","name":"宁乡"},{"id":654,"spell":"ningyang","name":"宁阳"},{"id":655,"spell":"nongan","name":"农安"}],"P":[{"id":216,"spell":"panjin","name":"盘锦"},{"id":217,"spell":"panzhihua","name":"攀枝花"},{"id":218,"spell":"pingdingshan","name":"平顶山"},{"id":219,"spell":"pingliang","name":"平凉"},{"id":220,"spell":"pingxiang","name":"萍乡"},{"id":221,"spell":"puer","name":"普洱"},{"id":222,"spell":"putian","name":"莆田"},{"id":223,"spell":"puyang","name":"濮阳"},{"id":656,"spell":"panan","name":"磐安"},{"id":657,"spell":"panshi","name":"磐石"},{"id":658,"spell":"peixian","name":"沛县"},{"id":659,"spell":"penglai","name":"蓬莱"},{"id":660,"spell":"pengshui","name":"彭水"},{"id":661,"spell":"pengze","name":"彭泽"},{"id":662,"spell":"pengzhou","name":"彭州"},{"id":663,"spell":"pingdu","name":"平度"},{"id":664,"spell":"pinghe","name":"平和"},{"id":665,"spell":"pinghu","name":"平湖"},{"id":666,"spell":"pingnan","name":"屏南"},{"id":667,"spell":"pingshan","name":"平山"},{"id":668,"spell":"pingtan","name":"平潭"},{"id":669,"spell":"pingyang","name":"平阳"},{"id":670,"spell":"pingyin","name":"平阴"},{"id":671,"spell":"pingyi","name":"平邑"},{"id":672,"spell":"pingyuan","name":"平原"},{"id":673,"spell":"pingyuan","name":"平远"},{"id":674,"spell":"pixian","name":"郫县"},{"id":675,"spell":"pizhou","name":"邳州"},{"id":676,"spell":"poyang","name":"鄱阳"},{"id":677,"spell":"pucheng","name":"浦城"},{"id":678,"spell":"pujiang","name":"浦江"},{"id":679,"spell":"pujiang","name":"蒲江"},{"id":680,"spell":"pulandian","name":"普兰店"},{"id":681,"spell":"puning","name":"普宁"}],"Q":[{"id":34,"spell":"qingdao","name":"青岛"},{"id":35,"spell":"quanzhou","name":"泉州"},{"id":224,"spell":"qiandong","name":"黔东"},{"id":225,"spell":"qiannan","name":"黔南"},{"id":226,"spell":"qianxinan","name":"黔西南"},{"id":227,"spell":"qingyang","name":"庆阳"},{"id":228,"spell":"qingyuan","name":"清远"},{"id":229,"spell":"qinhuangdao","name":"秦皇岛"},{"id":230,"spell":"qinzhou","name":"钦州"},{"id":231,"spell":"qiqihaer","name":"齐齐哈尔"},{"id":232,"spell":"qitaihe","name":"七台河"},{"id":233,"spell":"qujing","name":"曲靖"},{"id":234,"spell":"quzhou","name":"衢州"},{"id":682,"spell":"qianan","name":"迁安"},{"id":683,"spell":"qianshan","name":"潜山"},{"id":684,"spell":"qianshan","name":"铅山"},{"id":685,"spell":"qianxi","name":"迁西"},{"id":686,"spell":"qidong","name":"启东"},{"id":687,"spell":"qihe","name":"齐河"},{"id":688,"spell":"qijiang","name":"綦江"},{"id":689,"spell":"qimen","name":"祁门"},{"id":690,"spell":"qingliu","name":"清流"},{"id":691,"spell":"qingtian","name":"青田"},{"id":692,"spell":"qingxin","name":"清新"},{"id":693,"spell":"qingyang","name":"青阳"},{"id":694,"spell":"qingyuan","name":"庆元"},{"id":695,"spell":"qingyun","name":"庆云"},{"id":696,"spell":"qingzhen","name":"清镇"},{"id":697,"spell":"qingzhou","name":"青州"},{"id":698,"spell":"qinyang","name":"沁阳"},{"id":699,"spell":"qionglai","name":"邛崃"},{"id":700,"spell":"qixia","name":"栖霞"},{"id":701,"spell":"quanjiao","name":"全椒"},{"id":702,"spell":"quannan","name":"全南"},{"id":703,"spell":"qufu","name":"曲阜"},{"id":704,"spell":"qujiang","name":"曲江"}],"R":[{"id":235,"spell":"rikaze","name":"日喀则"},{"id":236,"spell":"rizhao","name":"日照"},{"id":705,"spell":"raoping","name":"饶平"},{"id":706,"spell":"renhua","name":"仁化"},{"id":707,"spell":"rongan","name":"融安"},{"id":708,"spell":"rongchang","name":"荣昌"},{"id":709,"spell":"rongcheng","name":"荣成"},{"id":710,"spell":"rongshui","name":"融水"},{"id":711,"spell":"rudong","name":"如东"},{"id":712,"spell":"rugao","name":"如皋"},{"id":713,"spell":"ruian","name":"瑞安"},{"id":714,"spell":"ruichang","name":"瑞昌"},{"id":715,"spell":"ruijin","name":"瑞金"},{"id":716,"spell":"rushan","name":"乳山"},{"id":717,"spell":"ruyang","name":"汝阳"},{"id":718,"spell":"ruyuan","name":"乳源"}],"S":[{"id":3,"spell":"shanghai","name":"上海"},{"id":36,"spell":"shenyang","name":"沈阳"},{"id":37,"spell":"shenzhen","name":"深圳"},{"id":38,"spell":"shijiazhuang","name":"石家庄"},{"id":39,"spell":"suzhou","name":"苏州"},{"id":237,"spell":"sanmenxia","name":"三门峡"},{"id":238,"spell":"sanming","name":"三明"},{"id":239,"spell":"sanya","name":"三亚"},{"id":240,"spell":"shangluo","name":"商洛"},{"id":241,"spell":"shangqiu","name":"商丘"},{"id":242,"spell":"shangrao","name":"上饶"},{"id":243,"spell":"shannan","name":"山南"},{"id":244,"spell":"shantou","name":"汕头"},{"id":245,"spell":"shanwei","name":"汕尾"},{"id":246,"spell":"shaoguan","name":"韶关"},{"id":247,"spell":"shaoxing","name":"绍兴"},{"id":248,"spell":"shaoyang","name":"邵阳"},{"id":249,"spell":"shiyan","name":"十堰"},{"id":250,"spell":"shizuishan","name":"石嘴山"},{"id":251,"spell":"shuangyashan","name":"双鸭山"},{"id":252,"spell":"shuozhou","name":"朔州"},{"id":253,"spell":"siping","name":"四平"},{"id":254,"spell":"songyuan","name":"松原"},{"id":255,"spell":"suihua","name":"绥化"},{"id":256,"spell":"suining","name":"遂宁"},{"id":257,"spell":"suizhou","name":"随州"},{"id":258,"spell":"suqian","name":"宿迁"},{"id":259,"spell":"suzhou","name":"宿州"},{"id":719,"spell":"sanjiang","name":"三江"},{"id":720,"spell":"sanmen","name":"三门"},{"id":721,"spell":"saoan","name":"诏安"},{"id":722,"spell":"shanggao","name":"上高"},{"id":723,"spell":"shanghang","name":"上杭"},{"id":724,"spell":"shanghe","name":"商河"},{"id":725,"spell":"shangli","name":"上栗"},{"id":726,"spell":"shanglin","name":"上林"},{"id":727,"spell":"shangrao","name":"上饶"},{"id":728,"spell":"shangyou","name":"上犹"},{"id":729,"spell":"shangyu","name":"上虞"},{"id":730,"spell":"shangzhi","name":"尚志"},{"id":731,"spell":"shaowu","name":"邵武"},{"id":732,"spell":"shaoxing","name":"绍兴"},{"id":733,"spell":"shaxian","name":"沙县"},{"id":734,"spell":"shengsi","name":"嵊泗"},{"id":735,"spell":"shengzhou","name":"嵊州"},{"id":736,"spell":"shenxian","name":"莘县"},{"id":737,"spell":"shenze","name":"深泽"},{"id":738,"spell":"shexian","name":"歙县"},{"id":739,"spell":"sheyang","name":"射阳"},{"id":740,"spell":"shicheng","name":"石城"},{"id":741,"spell":"shilin","name":"石林"},{"id":742,"spell":"shishi","name":"石狮"},{"id":743,"spell":"shitai","name":"石台"},{"id":744,"spell":"shixing","name":"始兴"},{"id":745,"spell":"shizhu","name":"石柱"},{"id":746,"spell":"shouguang","name":"寿光"},{"id":747,"spell":"shouning","name":"寿宁"},{"id":748,"spell":"shouxian","name":"寿县"},{"id":749,"spell":"shuangcheng","name":"双城"},{"id":750,"spell":"shuangliu","name":"双流"},{"id":751,"spell":"shucheng","name":"舒城"},{"id":752,"spell":"shulan","name":"舒兰"},{"id":753,"spell":"shunchang","name":"顺昌"},{"id":754,"spell":"shuyang","name":"沭阳"},{"id":755,"spell":"sihong","name":"泗洪"},{"id":756,"spell":"sihui","name":"四会"},{"id":757,"spell":"sishui","name":"泗水"},{"id":758,"spell":"sixian","name":"泗县"},{"id":759,"spell":"siyang","name":"泗阳"},{"id":760,"spell":"songming","name":"嵩明"},{"id":761,"spell":"songxi","name":"松溪"},{"id":762,"spell":"songxian","name":"嵩县"},{"id":763,"spell":"songyang","name":"松阳"},{"id":764,"spell":"suichang","name":"遂昌"},{"id":765,"spell":"suichuan","name":"遂川"},{"id":766,"spell":"suining","name":"睢宁"},{"id":767,"spell":"suixi","name":"濉溪"},{"id":768,"spell":"suixi","name":"遂溪"},{"id":769,"spell":"susong","name":"宿松"},{"id":770,"spell":"suyu","name":"宿豫"}],"T":[{"id":4,"spell":"tianjin","name":"天津"},{"id":40,"spell":"taizhou","name":"台州"},{"id":41,"spell":"tangshan","name":"唐山"},{"id":260,"spell":"tachengdi","name":"塔城地"},{"id":261,"spell":"taian","name":"泰安"},{"id":262,"spell":"taiyuan","name":"太原"},{"id":263,"spell":"taizhou","name":"泰州"},{"id":264,"spell":"tianshui","name":"天水"},{"id":265,"spell":"tieling","name":"铁岭"},{"id":266,"spell":"tongchuan","name":"铜川"},{"id":267,"spell":"tonghua","name":"通化"},{"id":268,"spell":"tongliao","name":"通辽"},{"id":269,"spell":"tongling","name":"铜陵"},{"id":270,"spell":"tongren","name":"铜仁"},{"id":271,"spell":"tulufan","name":"吐鲁番"},{"id":771,"spell":"taicang","name":"太仓"},{"id":772,"spell":"taihe","name":"太和"},{"id":773,"spell":"taihe","name":"泰和"},{"id":774,"spell":"taihu","name":"太湖"},{"id":775,"spell":"taining","name":"泰宁"},{"id":776,"spell":"taishan","name":"台山"},{"id":777,"spell":"taishun","name":"泰顺"},{"id":778,"spell":"taixing","name":"泰兴"},{"id":779,"spell":"tancheng","name":"郯城"},{"id":780,"spell":"tanghai","name":"唐海"},{"id":781,"spell":"tengzhou","name":"滕州"},{"id":782,"spell":"tianchang","name":"天长"},{"id":783,"spell":"tiantai","name":"天台"},{"id":784,"spell":"tongcheng","name":"桐城"},{"id":785,"spell":"tonggu","name":"铜鼓"},{"id":786,"spell":"tonghe","name":"通河"},{"id":787,"spell":"tongliang","name":"铜梁"},{"id":788,"spell":"tongling","name":"铜陵"},{"id":789,"spell":"tonglu","name":"桐庐"},{"id":790,"spell":"tongnan","name":"潼南"},{"id":791,"spell":"tongshan","name":"铜山"},{"id":792,"spell":"tongxiang","name":"桐乡"},{"id":793,"spell":"tongzhou","name":"通州"}],"W":[{"id":42,"spell":"weifang","name":"潍坊"},{"id":43,"spell":"weihai","name":"威海"},{"id":44,"spell":"wuhan","name":"武汉"},{"id":45,"spell":"wuxi","name":"无锡"},{"id":272,"spell":"weinan","name":"渭南"},{"id":273,"spell":"wenshan","name":"文山"},{"id":274,"spell":"wenzhou","name":"温州"},{"id":275,"spell":"wuhai","name":"乌海"},{"id":276,"spell":"wuhu","name":"芜湖"},{"id":277,"spell":"wulanchabu","name":"乌兰察布"},{"id":278,"spell":"wulumuqi","name":"乌鲁木齐"},{"id":279,"spell":"wuwei","name":"武威"},{"id":280,"spell":"wuzhong","name":"吴忠"},{"id":281,"spell":"wuzhou","name":"梧州"},{"id":794,"spell":"wafangdian","name":"瓦房店"},{"id":795,"spell":"wanan","name":"万安"},{"id":796,"spell":"wangcheng","name":"望城"},{"id":797,"spell":"wangjiang","name":"望江"},{"id":798,"spell":"wannian","name":"万年"},{"id":799,"spell":"wanzai","name":"万载"},{"id":800,"spell":"weishan","name":"微山"},{"id":801,"spell":"wencheng","name":"文成"},{"id":802,"spell":"wendeng","name":"文登"},{"id":803,"spell":"wengyuan","name":"翁源"},{"id":804,"spell":"wenling","name":"温岭"},{"id":805,"spell":"wenshang","name":"汶上"},{"id":806,"spell":"wenxian","name":"温县"},{"id":807,"spell":"woyang","name":"涡阳"},{"id":808,"spell":"wuchang","name":"五常"},{"id":809,"spell":"wucheng","name":"武城"},{"id":810,"spell":"wuchuan","name":"吴川"},{"id":811,"spell":"wudi","name":"无棣"},{"id":812,"spell":"wuhe","name":"五河"},{"id":813,"spell":"wuhu","name":"芜湖"},{"id":814,"spell":"wuhua","name":"五华"},{"id":815,"spell":"wuji","name":"无极"},{"id":816,"spell":"wujiang","name":"吴江"},{"id":817,"spell":"wulian","name":"五莲"},{"id":818,"spell":"wulong","name":"武隆"},{"id":819,"spell":"wuming","name":"武鸣"},{"id":820,"spell":"wuning","name":"武宁"},{"id":821,"spell":"wuping","name":"武平"},{"id":822,"spell":"wushan","name":"巫山"},{"id":823,"spell":"wuwei","name":"无为"},{"id":824,"spell":"wuxi","name":"巫溪"},{"id":825,"spell":"wuyi","name":"武义"},{"id":826,"spell":"wuyishan","name":"武夷山"},{"id":827,"spell":"wuyuan","name":"婺源"},{"id":828,"spell":"wuzhi","name":"武陟"}],"X":[{"id":46,"spell":"xiamen","name":"厦门"},{"id":47,"spell":"xian","name":"西安"},{"id":48,"spell":"xuchang","name":"许昌"},{"id":49,"spell":"xuzhou","name":"徐州"},{"id":282,"spell":"xiangfan","name":"襄樊"},{"id":283,"spell":"xiangtan","name":"湘潭"},{"id":284,"spell":"xiangxi","name":"湘西"},{"id":285,"spell":"xianning","name":"咸宁"},{"id":286,"spell":"xianyang","name":"咸阳"},{"id":287,"spell":"xiaogan","name":"孝感"},{"id":288,"spell":"xilinguolemeng","name":"锡林郭勒盟"},{"id":289,"spell":"xinganmeng","name":"兴安盟"},{"id":290,"spell":"xingtai","name":"邢台"},{"id":291,"spell":"xining","name":"西宁"},{"id":292,"spell":"xinxiang","name":"新乡"},{"id":293,"spell":"xinyang","name":"信阳"},{"id":294,"spell":"xinyu","name":"新余"},{"id":295,"spell":"xinzhou","name":"忻州"},{"id":296,"spell":"xishuangbanna","name":"西双版纳"},{"id":297,"spell":"xuancheng","name":"宣城"},{"id":829,"spell":"xiajiang","name":"峡江"},{"id":830,"spell":"xiajin","name":"夏津"},{"id":831,"spell":"xiangshan","name":"象山"},{"id":832,"spell":"xiangshui","name":"响水"},{"id":833,"spell":"xianju","name":"仙居"},{"id":834,"spell":"xianyou","name":"仙游"},{"id":835,"spell":"xiaoxian","name":"萧县"},{"id":836,"spell":"xiapu","name":"霞浦"},{"id":837,"spell":"xifeng","name":"息烽"},{"id":838,"spell":"xinan","name":"新安"},{"id":839,"spell":"xinchang","name":"新昌"},{"id":840,"spell":"xinfeng","name":"信丰"},{"id":841,"spell":"xinfeng","name":"新丰"},{"id":842,"spell":"xingan","name":"新干"},{"id":843,"spell":"xingguo","name":"兴国"},{"id":844,"spell":"xinghua","name":"兴化"},{"id":845,"spell":"xingning","name":"兴宁"},{"id":846,"spell":"xingtang","name":"行唐"},{"id":847,"spell":"xingyang","name":"荥阳"},{"id":848,"spell":"xingzi","name":"星子"},{"id":849,"spell":"xinji","name":"辛集"},{"id":850,"spell":"xinjian","name":"新建"},{"id":851,"spell":"xinjin","name":"新津"},{"id":852,"spell":"xinle","name":"新乐"},{"id":853,"spell":"xinmin","name":"新民"},{"id":854,"spell":"xinmi","name":"新密"},{"id":855,"spell":"xintai","name":"新泰"},{"id":856,"spell":"xinxing","name":"新兴"},{"id":857,"spell":"xinyi","name":"新沂"},{"id":858,"spell":"xinyi","name":"信宜"},{"id":859,"spell":"xinzheng","name":"新郑"},{"id":860,"spell":"xiuning","name":"休宁"},{"id":861,"spell":"xiushan","name":"秀山"},{"id":862,"spell":"xiushui","name":"修水"},{"id":863,"spell":"xiuwen","name":"修文"},{"id":864,"spell":"xiuwu","name":"修武"},{"id":865,"spell":"xundian","name":"寻甸"},{"id":866,"spell":"xunwu","name":"寻乌"},{"id":867,"spell":"xuwen","name":"徐闻"},{"id":868,"spell":"xuyi","name":"盱眙"}],"Y":[{"id":50,"spell":"yangzhou","name":"扬州"},{"id":51,"spell":"yantai","name":"烟台"},{"id":298,"spell":"yaan","name":"雅安"},{"id":299,"spell":"yanan","name":"延安"},{"id":300,"spell":"yanbian","name":"延边"},{"id":301,"spell":"yancheng","name":"盐城"},{"id":302,"spell":"yangjiang","name":"阳江"},{"id":303,"spell":"yangquan","name":"阳泉"},{"id":304,"spell":"yibin","name":"宜宾"},{"id":305,"spell":"yichang","name":"宜昌"},{"id":306,"spell":"yichun","name":"伊春"},{"id":307,"spell":"yichun","name":"宜春"},{"id":308,"spell":"yilihasake","name":"伊犁哈萨克"},{"id":309,"spell":"yinchuan","name":"银川"},{"id":310,"spell":"yingkou","name":"营口"},{"id":311,"spell":"yingtan","name":"鹰潭"},{"id":312,"spell":"yiyang","name":"益阳"},{"id":313,"spell":"yongzhou","name":"永州"},{"id":314,"spell":"yueyang","name":"岳阳"},{"id":315,"spell":"yulin","name":"玉林"},{"id":316,"spell":"yulin","name":"榆林"},{"id":317,"spell":"yuncheng","name":"运城"},{"id":318,"spell":"yunfu","name":"云浮"},{"id":319,"spell":"yushu","name":"玉树"},{"id":320,"spell":"yuxi","name":"玉溪"},{"id":869,"spell":"yangchun","name":"阳春"},{"id":870,"spell":"yangdong","name":"阳东"},{"id":871,"spell":"yanggu","name":"阳谷"},{"id":872,"spell":"yangshan","name":"阳山"},{"id":873,"spell":"yangxin","name":"阳信"},{"id":874,"spell":"yangxi","name":"阳西"},{"id":875,"spell":"yangzhong","name":"扬中"},{"id":876,"spell":"yanshi","name":"偃师"},{"id":877,"spell":"yanshou","name":"延寿"},{"id":878,"spell":"yanzhou","name":"兖州"},{"id":879,"spell":"yichuan","name":"伊川"},{"id":880,"spell":"yifeng","name":"宜丰"},{"id":881,"spell":"yihuang","name":"宜黄"},{"id":882,"spell":"yilan","name":"依兰"},{"id":883,"spell":"yiliang","name":"宜良"},{"id":884,"spell":"yinan","name":"沂南"},{"id":885,"spell":"yingde","name":"英德"},{"id":886,"spell":"yingshang","name":"颍上"},{"id":887,"spell":"yishui","name":"沂水"},{"id":888,"spell":"yiwu","name":"义乌"},{"id":889,"spell":"yixian","name":"黟县"},{"id":890,"spell":"yixing","name":"宜兴"},{"id":891,"spell":"yiyang","name":"弋阳"},{"id":892,"spell":"yiyang","name":"宜阳"},{"id":893,"spell":"yiyuan","name":"沂源"},{"id":894,"spell":"yizheng","name":"仪征"},{"id":895,"spell":"yongan","name":"永安"},{"id":896,"spell":"yongchuan","name":"永川"},{"id":897,"spell":"yongchun","name":"永春"},{"id":898,"spell":"yongdeng","name":"永登"},{"id":899,"spell":"yongding","name":"永定"},{"id":900,"spell":"yongfeng","name":"永丰"},{"id":901,"spell":"yongji","name":"永吉"},{"id":902,"spell":"yongjia","name":"永嘉"},{"id":903,"spell":"yongkang","name":"永康"},{"id":904,"spell":"yongning","name":"邕宁"},{"id":905,"spell":"yongtai","name":"永泰"},{"id":906,"spell":"yongxin","name":"永新"},{"id":907,"spell":"yongxiu","name":"永修"},{"id":908,"spell":"youxi","name":"尤溪"},{"id":909,"spell":"youyang","name":"酉阳"},{"id":910,"spell":"yuanshi","name":"元氏"},{"id":911,"spell":"yucheng","name":"禹城"},{"id":912,"spell":"yudu","name":"于都"},{"id":913,"spell":"yuexi","name":"岳西"},{"id":914,"spell":"yugan","name":"余干"},{"id":915,"spell":"yuhuan","name":"玉环"},{"id":916,"spell":"yujiang","name":"余江"},{"id":917,"spell":"yunan","name":"郁南"},{"id":918,"spell":"yunan","name":"云安"},{"id":919,"spell":"yuncheng","name":"郓城"},{"id":920,"spell":"yunhe","name":"云和"},{"id":921,"spell":"yunxiao","name":"云霄"},{"id":922,"spell":"yunyang","name":"云阳"},{"id":923,"spell":"yushan","name":"玉山"},{"id":924,"spell":"yushu","name":"榆树"},{"id":925,"spell":"yutai","name":"鱼台"},{"id":926,"spell":"yutian","name":"玉田"},{"id":927,"spell":"yuyao","name":"余姚"},{"id":928,"spell":"yuzhong","name":"榆中"}],"Z":[{"id":52,"spell":"zhangzhou","name":"漳州"},{"id":53,"spell":"zhengzhou","name":"郑州"},{"id":54,"spell":"zhongshan","name":"中山"},{"id":55,"spell":"zhuhai","name":"珠海"},{"id":321,"spell":"zaozhuang","name":"枣庄"},{"id":322,"spell":"zhangjiajie","name":"张家界"},{"id":323,"spell":"zhangjiakou","name":"张家口"},{"id":324,"spell":"zhangye","name":"张掖"},{"id":325,"spell":"zhanjiang","name":"湛江"},{"id":326,"spell":"zhaoqing","name":"肇庆"},{"id":327,"spell":"zhaotong","name":"昭通"},{"id":328,"spell":"zhenjiang","name":"镇江"},{"id":329,"spell":"zhongwei","name":"中卫"},{"id":330,"spell":"zhoukou","name":"周口"},{"id":331,"spell":"zhoushan","name":"舟山"},{"id":332,"spell":"zhumadian","name":"驻马店"},{"id":333,"spell":"zhuzhou","name":"株洲"},{"id":334,"spell":"zibo","name":"淄博"},{"id":335,"spell":"zigong","name":"自贡"},{"id":336,"spell":"ziyang","name":"资阳"},{"id":337,"spell":"zunyi","name":"遵义"},{"id":929,"spell":"zanhuang","name":"赞皇"},{"id":930,"spell":"zengcheng","name":"增城"},{"id":931,"spell":"zhangjiagang","name":"张家港"},{"id":932,"spell":"zhangping","name":"漳平"},{"id":933,"spell":"zhangpu","name":"漳浦"},{"id":934,"spell":"zhangqiu","name":"章丘"},{"id":935,"spell":"zhangshu","name":"樟树"},{"id":936,"spell":"zhanhua","name":"沾化"},{"id":937,"spell":"zhaoxian","name":"赵县"},{"id":938,"spell":"zhaoyuan","name":"招远"},{"id":939,"spell":"zhengding","name":"正定"},{"id":940,"spell":"zhenghe","name":"政和"},{"id":941,"spell":"zherong","name":"柘荣"},{"id":942,"spell":"zhongmou","name":"中牟"},{"id":943,"spell":"zhongxian","name":"忠县"},{"id":944,"spell":"zhouning","name":"周宁"},{"id":945,"spell":"zhouzhi","name":"周至"},{"id":946,"spell":"zhuanghe","name":"庄河"},{"id":947,"spell":"zhucheng","name":"诸城"},{"id":948,"spell":"zhuji","name":"诸暨"},{"id":949,"spell":"zijin","name":"紫金"},{"id":950,"spell":"zixi","name":"资溪"},{"id":951,"spell":"zoucheng","name":"邹城"},{"id":952,"spell":"zouping","name":"邹平"},{"id":953,"spell":"zunhua","name":"遵化"}]}}}]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>基础核心回顾</title>
      <link href="/2019/11/27/%E5%9F%BA%E7%A1%80%E6%A0%B8%E5%BF%83%E5%9B%9E%E9%A1%BE/"/>
      <url>/2019/11/27/%E5%9F%BA%E7%A1%80%E6%A0%B8%E5%BF%83%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="如何理解HTML语义化"><a href="#如何理解HTML语义化" class="headerlink" title="如何理解HTML语义化"></a>如何理解HTML语义化</h3><ol><li>段落用<code>p</code>，边栏用<code>aside</code>,主要内容用<code>main</code>标签等</li><li>以前主要后端写HTML，用table来展示表格，严重违反了HTML语义化。后来前端专业化，了解HTML的各个标签的用法，使用恰当的标签展示内容。</li></ol><h3 id="meta-viewport-移动端适应"><a href="#meta-viewport-移动端适应" class="headerlink" title="meta viewport 移动端适应"></a>meta viewport 移动端适应</h3><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no,initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</code></p><p>控制页面在移动端不要缩小显示。</p><p><strong>为什么</strong>：因为一开始页面是给PC准备的，乔布斯iPhone触屏手机的出现，页面不适应手机屏幕，所以把手机模拟成980px，页面缩小。后来，智能手机普及，这功能部分网站不需要了，锁业设定<code>&lt;meat name=&quot;viewport&quot;&gt;</code>让手机不要缩小我的网页。</p><h3 id="canvas元素"><a href="#canvas元素" class="headerlink" title="canvas元素"></a>canvas元素</h3><p>画布绘制一个绿色的长方形</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// HTML</span><br><span class="line"></span><br><span class="line">&lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</span><br><span class="line"></span><br><span class="line">// JS</span><br><span class="line"></span><br><span class="line">const canvas = document.querySeletor(&apos;#id&apos;) // 获取元素</span><br><span class="line">const ctx = canvas.getContext(&apos;2d&apos;) // 获取这个元素的context</span><br><span class="line"></span><br><span class="line">ctx.fillStyle = &apos;green&apos; // 使这个长方形变绿色</span><br><span class="line">ctx.fillRect(10,10,150,100) // 左上角(10,10), 大小设置宽高(150,100)</span><br></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><p>content-box: width == 内容区宽度<br>border-box: width = 内容区宽度 + border宽度 + padding宽度 （不管ID<code>(box-sizing: border-box)</code>）</p><h3 id="css-reset-和-normalize-css-区别"><a href="#css-reset-和-normalize-css-区别" class="headerlink" title="css reset 和 normalize.css 区别"></a>css reset 和 normalize.css 区别</h3><ol><li>reset 样式重置，直接抛弃默认样式。</li><li>normalize 标准化样式，让所有浏览器标签跟标准规定的默认样式一致，各浏览器的标签默认样式基本统一。</li></ol><h3 id="如何居中"><a href="#如何居中" class="headerlink" title="如何居中"></a>如何居中</h3><ul><li><p>水平居中</p><ul><li>内联元素： 在父元素上写<code>text-align: center</code></li><li>块级元素： <code>margin-left: auto; margin-right: auto</code></li></ul></li><li><p>垂直居中</p><ul><li><p>(table自带功能)[<a href="http://js.jirengu.com/gaquk/2/edit?html,css,output]" target="_blank" rel="noopener">http://js.jirengu.com/gaquk/2/edit?html,css,output]</a></p></li><li><p>(100%高度的after、before加上inline-block)(<a href="http://js.jirengu.com/poveg/1/edit?html,css,output" target="_blank" rel="noopener">http://js.jirengu.com/poveg/1/edit?html,css,output</a>)</p></li><li><p>(div装成table)(<a href="http://js.jirengu.com/yusux/6/edit?html,css,output" target="_blank" rel="noopener">http://js.jirengu.com/yusux/6/edit?html,css,output</a>)</p></li><li><p>(margin-left -50^%)[<a href="http://js.jirengu.com/sugex/1/edit?html,css,output]" target="_blank" rel="noopener">http://js.jirengu.com/sugex/1/edit?html,css,output]</a> 绝对定位、top、left50%、margin-left为<br>宽度的一半</p></li><li><p>(translate -50%)[<a href="http://js.jirengu.com/fedatesore/1/edit]" target="_blank" rel="noopener">http://js.jirengu.com/fedatesore/1/edit]</a>   子元素transform: translate(-50%,-50%)</p></li><li><p>(absolute margin auto)[<a href="http://js.jirengu.com/sugex/5/edit?html,css,output]" target="_blank" rel="noopener">http://js.jirengu.com/sugex/5/edit?html,css,output]</a> 绝对定位，四面为0， margin: auto</p></li><li><p>(flex)[<a href="http://js.jirengu.com/sugex/7/edit?html,css,output]" target="_blank" rel="noopener">http://js.jirengu.com/sugex/7/edit?html,css,output]</a>  父元素display: flex、justify-content: center、align-items: center</p></li></ul></li></ul><h3 id="优先级如何确定"><a href="#优先级如何确定" class="headerlink" title="优先级如何确定"></a>优先级如何确定</h3><ol><li>选择器越具体，优先级越高。</li><li>同样的优先级，写在后面优先级越高。</li><li>important 优先级最高。</li></ol><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><p>块级格式化上下文</p><ul><li><p>overflow: hidden 清除浮动，取消父子margin合并</p></li><li><p>主要用.clearfix清除浮动（用了float浮动，必须在父元素添加clearfix清除浮动）</p></li></ul><h3 id="如何清除浮动"><a href="#如何清除浮动" class="headerlink" title="如何清除浮动"></a>如何清除浮动</h3><ol><li>overflow: hidden</li><li>clearfix<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.clearfix::after &#123;</span><br><span class="line">  content: &apos;&apos;;</span><br><span class="line">  display: block;</span><br><span class="line">  clear: both</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clearfix &#123;</span><br><span class="line">  zoom: 1 // 兼容IE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><h3 id="JS有哪些数据类型"><a href="#JS有哪些数据类型" class="headerlink" title="JS有哪些数据类型"></a>JS有哪些数据类型</h3><p>七种数据类型。<br><code>Number</code>、<code>string</code>、<code>boolean</code>、<code>null</code>、<code>undefined</code>、<code>object</code>、<code>Symbol</code></p><p>object 包括了函数、数组、正则、NaN、日期等</p><h3 id="Promise怎么使用"><a href="#Promise怎么使用" class="headerlink" title="Promise怎么使用"></a>Promise怎么使用</h3><ul><li>then</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$.ajax(...).then(成功函数、失败函数)</span><br></pre></td></tr></table></figure><ul><li>链式then</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$.ajax(...).then(成功函数, 失败函数).then(成功函数2, 失败函数2)</span><br></pre></td></tr></table></figure><ul><li>自己生成Promise函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function xxx() &#123;</span><br><span class="line">  return new Promise(function(resolve, reject) &#123;</span><br><span class="line">    setTimeout( () =&gt; &#123;</span><br><span class="line">      resolve() 或者 reject()</span><br><span class="line">    &#125;, 3000)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xxx().then(...)</span><br></pre></td></tr></table></figure><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let xhr = new XMLHttpRequest()</span><br><span class="line">xhr.open(&apos;POST&apos;, &apos;/xxx&apos;)</span><br><span class="line">xhr.onreadystatechange = function() &#123;</span><br><span class="line">  if(xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</span><br><span class="line">    console.log(xhr.responseT)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(&apos;a=1&amp;b=2&apos;)</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>一个作用域有权访问另一个函数作用域中的变量，就是闭包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function createAdder () &#123;</span><br><span class="line">  var n = 0</span><br><span class="line">  return functinn () &#123;</span><br><span class="line">    n += 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let adder = createAdder()</span><br><span class="line">adder() // n === 1</span><br><span class="line">adder() // m === 2</span><br><span class="line">console.log(n) // n is not defined</span><br></pre></td></tr></table></figure><h3 id="this理解"><a href="#this理解" class="headerlink" title="this理解"></a>this理解</h3><ol><li>fn()里面的<code>this</code>就是<code>window</code></li><li>fn() 是<code>strict mode</code>严格模式下代码，<code>this</code>就是<code>undefined</code></li><li>a.b.c.fn() 里面的<code>this</code>就是a.b.c</li><li>new Fn() 里面的<code>this</code>就是新生成的实例</li><li>() =&gt; console.log(this) 里面<code>this</code>就是外面的<code>this</code></li></ol><h3 id="什么是立即执行函数"><a href="#什么是立即执行函数" class="headerlink" title="什么是立即执行函数"></a>什么是立即执行函数</h3><p>声明个匿名函数 (function() {})<br>目的： 造出一个函数作用域，防止污染全局变量</p><p>ES6 新语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  let name // 作用域内有效，外部无效。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="async-await-语法"><a href="#async-await-语法" class="headerlink" title="async/await 语法"></a>async/await 语法</h3><p>将异步代码生成同步代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function resolveAfter2Seconds() &#123;</span><br><span class="line">  return new Promise(resolve =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      resolve(&apos;resolved&apos;);</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function asyncCall() &#123;</span><br><span class="line">  console.log(&apos;calling&apos;);</span><br><span class="line">  var result = await resolveAfter2Seconds();</span><br><span class="line">  console.log(result);</span><br><span class="line">  // expected output: &apos;resolved&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncCall();</span><br></pre></td></tr></table></figure><p>目的： 把异步代码写成同步代码</p><h3 id="如何实现深拷贝"><a href="#如何实现深拷贝" class="headerlink" title="如何实现深拷贝"></a>如何实现深拷贝</h3><ol><li>JSON来深拷贝</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var a = &#123;...&#125;</span><br><span class="line">var b = JSON.parse(JSON.stringify(a))</span><br></pre></td></tr></table></figure><p>缺点： JSON不支持函数，不支持引用，undefined、正则、date</p><ol start="2"><li>使用递归拷贝</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function clone(object) &#123;</span><br><span class="line">  var newObject</span><br><span class="line">  if (!object instanceof Object) &#123;</span><br><span class="line">    return object</span><br><span class="line">  &#125; else if (object instanceof Array) &#123;</span><br><span class="line">    newObject = []</span><br><span class="line">  &#125; else if (object instanceof Function) &#123;</span><br><span class="line">    newObject = eval(object.toString)</span><br><span class="line">  &#125; else if (object instanceof Objcet) &#123;</span><br><span class="line">    newObject = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  for (let key in object) &#123;</span><br><span class="line">    newObject[key] = clone(object[key])</span><br><span class="line">  &#125;</span><br><span class="line">  return newObject</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><ol><li>计数排序的逻辑（正整数）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var a = [2,4,5,6,3,4,5]</span><br><span class="line">var hashTab = &#123;&#125;</span><br><span class="line">for(let i = 0; i &lt; a.length; i++) &#123;</span><br><span class="line">  if(a[i] in hashTab) &#123;&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  hashTab(a[i]) = true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(Object.keys(hashTab))</span><br></pre></td></tr></table></figure><ol start="2"><li>Set 去重</li></ol><p><code>var a = [2,4,5,6,3,4,5]</code><br><code>Array from(new Set(a))</code></p><h3 id="如何用正则实现string-trim"><a href="#如何用正则实现string-trim" class="headerlink" title="如何用正则实现string.trim()"></a>如何用正则实现string.trim()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function trim(string) &#123;</span><br><span class="line">  return string.replace(/^s+|\s+$/, &quot;&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JS原型是什么"><a href="#JS原型是什么" class="headerlink" title="JS原型是什么"></a>JS原型是什么</h3><p>每个对象都有原型，当访问这个变量时，这个变量不存在的话就去访问它的原型，一直沿着循环下去就是原型链，原型链最终指向null。</p><p>(原型)[<a href="https://zhuanlan.zhihu.com/p/23090041]" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/23090041]</a></p><h3 id="ES6-class"><a href="#ES6-class" class="headerlink" title="ES6 class"></a>ES6 class</h3><p>class 声明创建一个基于原型继承的具有给定名称的新类。class不能重复定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Polygon &#123;</span><br><span class="line">  constructor(height, width) &#123;</span><br><span class="line">    this.area = height * width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(new Polygon(4,3).area);</span><br><span class="line">// expected output: 12</span><br></pre></td></tr></table></figure><h3 id="JS如何实现继承"><a href="#JS如何实现继承" class="headerlink" title="JS如何实现继承"></a>JS如何实现继承</h3><ol><li>原型链</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function Animal() &#123;</span><br><span class="line">  this.body = &apos;肉体&apos;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.move = function() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Human(name) &#123;</span><br><span class="line">  Animal.apply(this, arguments)</span><br><span class="line">  this.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Human.prototype.__proto__ = Animal.prototype // 非法</span><br><span class="line"></span><br><span class="line">var f = function() &#123;&#125;</span><br><span class="line"></span><br><span class="line">f.prototype = Animal.prototype</span><br><span class="line">Human.prototype = new f()</span><br><span class="line"></span><br><span class="line">Human.prototype.useTools = function() &#123;&#125;</span><br><span class="line"></span><br><span class="line">var s = new Human()</span><br></pre></td></tr></table></figure><ol start="2"><li>extends关键字</li></ol><p>继承类<code>extends</code>, 在继承父类中子类在构造函数添加<code>super()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Animal &#123;</span><br><span class="line">  constructor () &#123;</span><br><span class="line">    this.body = &apos;肉体&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  move() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Human extends Animal &#123;</span><br><span class="line">  constructor (name) &#123;</span><br><span class="line">    super()</span><br><span class="line">    this.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  useTools ()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var s = new Human()</span><br></pre></td></tr></table></figure><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="DOM-事件模型是什么"><a href="#DOM-事件模型是什么" class="headerlink" title="DOM 事件模型是什么"></a>DOM 事件模型是什么</h3><ol><li>冒泡</li><li>捕获</li><li>如果这个元素时被点击的元素，aame 捕获不一定在冒泡之前，顺序是由监听顺序所决定。</li></ol><h3 id="移动端的触摸事件"><a href="#移动端的触摸事件" class="headerlink" title="移动端的触摸事件"></a>移动端的触摸事件</h3><ol><li>touchstart、touchmove、touchend、touchcancel</li><li>模拟swiper事件：记录两次touchmove事件的位置差，如果后一次是左一次的右边，说明向右滑动</li></ol><h3 id="事件委托及好处"><a href="#事件委托及好处" class="headerlink" title="事件委托及好处"></a>事件委托及好处</h3><p>假设父元素有四个子元素，不监听四个子元素，直接监听父元素，看触发事件的元素是哪个子元素，这就是事件委托。<br>好处：<strong>可以监听还未创建的动态元素，省监听器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function listen(element, eventType. selector, fn) &#123;</span><br><span class="line">  element.addEventlisten(eventType, e =&gt; &#123;</span><br><span class="line">    if(e.target.matches(selector) &#123;</span><br><span class="line">      fn.call(el, e,e)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="HTTP常用状态码"><a href="#HTTP常用状态码" class="headerlink" title="HTTP常用状态码"></a>HTTP常用状态码</h3><ul><li>200 OK 访问正常</li><li>301 请求页面永久移动</li><li>302 请求页面暂时移动</li><li>304 维修改</li><li>307 暂时重定向</li><li>401 未授权</li><li>403 禁止访问</li><li>404 未发现制定网址</li><li>500 服务器发生错误</li></ul><h3 id="301和302区别"><a href="#301和302区别" class="headerlink" title="301和302区别"></a>301和302区别</h3><ol><li>301 永久移动，浏览器会永久记住</li><li>302 暂时移动</li></ol><h3 id="HTTP-缓存怎么做"><a href="#HTTP-缓存怎么做" class="headerlink" title="HTTP 缓存怎么做"></a>HTTP 缓存怎么做</h3><ol><li>Cache-Control: max-age=300</li><li><a href="http://cdn.com/1.js?v=1" target="_blank" rel="noopener">http://cdn.com/1.js?v=1</a> 避开缓存</li></ol><h3 id="Cache和Etag-区别"><a href="#Cache和Etag-区别" class="headerlink" title="Cache和Etag 区别"></a>Cache和Etag 区别</h3><ul><li>Cache-Control表示浏览器使用缓存，不向服务器发请求</li><li>Cache-Control直接是通过不请求来实现，而ETag是会发请求的，只不过服务器根据请求的东西的内容有无变化来判断是否返回请求的资源</li></ul><h3 id="Cookie、Session"><a href="#Cookie、Session" class="headerlink" title="Cookie、Session"></a>Cookie、Session</h3><ul><li><p>Cookie</p><ol><li>HTTP响应通过Set-Cookie设置Cookie</li><li>浏览器访问制定域名必须带上Cookie作为Request Header</li><li>Cookie一般用来记录用户信息</li></ol></li><li><p>Sessiion</p><ol><li>Session 是服务器端的内存 (数据)</li><li>Session 一般通过Cookoie记录SessionID实现</li><li>SessionID 一般是随机数</li></ol></li></ul><h3 id="LocalStorage和Cookie区别"><a href="#LocalStorage和Cookie区别" class="headerlink" title="LocalStorage和Cookie区别"></a>LocalStorage和Cookie区别</h3><ol><li>Cookie 会随请求被发到服务器上，而localStorage不会</li><li>Cookie大小一般4k以下，localStorage一般5MB左右</li></ol><h3 id="GET-和-POST-的区别"><a href="#GET-和-POST-的区别" class="headerlink" title="GET 和 POST 的区别"></a>GET 和 POST 的区别</h3><ol><li>GET参数放在URL的查询参数里，而POST参数放在请求消息体里</li><li>GET没有POST安全（都不安全）</li><li>GET参数（url查询参数），有长度限制。一般是1024个字符。POST参数没有长度限制（实际中4-10MB限制）</li><li>GET请求只需要发一个包，POST请求需要发两个以上的包（因为POST有消息体）</li><li>GET用来读数据，POST来写数据，POST不幂等（幂等的意思是不管发多少次请求，结果都一样）</li></ol><h3 id="怎么跨域？-JSONP、CORS、PostMessage"><a href="#怎么跨域？-JSONP、CORS、PostMessage" class="headerlink" title="怎么跨域？ JSONP、CORS、PostMessage"></a>怎么跨域？ JSONP、CORS、PostMessage</h3><ol><li>JSONP</li><li>CORS</li><li>PostMessage </li></ol><h2 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h2><h3 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h3><p>共11个生命周期钩子<br><code>beforeCreate</code>、<code>created</code>、<code>beforeMount</code>、<code>mounted</code>、<code>beforeUpdate</code>、<code>updated</code>、<code>activated</code>、<code>deactivated</code>、<code>beforeDestory</code>、<code>destroyed</code>、<code>errorCaptured</code></p><h3 id="Vue如何实现组件通信"><a href="#Vue如何实现组件通信" class="headerlink" title="Vue如何实现组件通信"></a>Vue如何实现组件通信</h3><ol><li>父子通信</li><li>爷孙通信 (通过两对父子通信)</li><li>非父子组件通信（兄弟通信）（<code>new Vue()</code>作为eventBus）</li></ol><h3 id="Vuex的作用"><a href="#Vuex的作用" class="headerlink" title="Vuex的作用"></a>Vuex的作用</h3><p>(Vuex)[<a href="https://vuex.vuejs.org/zh/]" target="_blank" rel="noopener">https://vuex.vuejs.org/zh/]</a></p><h3 id="v-model双向数据绑定，缺点"><a href="#v-model双向数据绑定，缺点" class="headerlink" title="v-model双向数据绑定，缺点"></a>v-model双向数据绑定，缺点</h3><p>(深入响应式原理)[<a href="https://cn.vuejs.org/v2/guide/reactivity.html]" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/reactivity.html]</a></p><h3 id="VueRouter-路由是什么"><a href="#VueRouter-路由是什么" class="headerlink" title="VueRouter 路由是什么"></a>VueRouter 路由是什么</h3><p>(router)[<a href="https://router.vuejs.org/zh/]" target="_blank" rel="noopener">https://router.vuejs.org/zh/]</a></p><h3 id="Computed计算属性的用法？-跟mathods区别"><a href="#Computed计算属性的用法？-跟mathods区别" class="headerlink" title="Computed计算属性的用法？ 跟mathods区别"></a>Computed计算属性的用法？ 跟mathods区别</h3><ul><li><p><code>Computed</code>是响应式，而<code>methos</code>并非是响应式</p></li><li><p>调用方式不同。<code>Computed</code>义的成员像属性一样访问，<code>methods</code>定义的成员必须以函数形式调用。</p></li><li><p><code>Computed</code>带有缓存机制,<code>methods</code>函数每次调用都要执行一次。</p></li><li><p><code>Computed</code>可定义读写|只读模式，而<code>methods</code>不能。</p></li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>冒泡排序、选择排序、计数排序、快速排序、插入排序、归并排序</p><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h3 id="什么是XSS攻击？-如何预防？"><a href="#什么是XSS攻击？-如何预防？" class="headerlink" title="什么是XSS攻击？ 如何预防？"></a>什么是XSS攻击？ 如何预防？</h3><p><strong>Cross-Site Scripting（跨站脚本攻击）</strong>简称 XSS，是一种代码注入攻击。攻击者通过在目标网站上注入恶意脚本，使之在用户的浏览器上运行。利用这些恶意脚本，攻击者可获取用户的敏感信息如 <code>Cookie</code>、<code>SessionID</code> 等，进而危害数据安全</p><p>XSS 的本质是：恶意代码未经过滤，与网站正常的代码混在一起；浏览器无法分辨哪些脚本是可信的，导致恶意脚本被执行。</p><ul><li>通常页面中包含的用户输入内容都在固定的容器或者属性内，以文本的形式展示。</li><li>攻击者利用这些页面的用户输入片段，拼接特殊格式的字符串，突破原有位置的限制，形成了代码片段。</li><li>攻击者通过在目标网站上注入脚本，使之在用户的浏览器上运行，从而引发潜在风险。</li><li>通过 HTML 转义，可以防止 XSS 攻击。</li><li>HTML 转义是非常复杂的，在不同的情况下要采用不同的转义规则。如果采用了错误的转义规则，很有可能会埋下 XSS 隐患。</li><li>应当尽量避免自己写转义库，而应当采用成熟的、业界通用的转义库。</li></ul><p>预防：</p><ol><li>不要使用<code>innerHTML</code>，改成<code>innerText</code>,script就会被当成文本，不执行。</li><li>如果一定要用<code>innerHTML</code>，字符过滤。</li></ol><ul><li><p>把<code>&lt;</code>替换<code>&amp;lt</code></p></li><li><p>把<code>&gt;</code>替换<code>&amp;gt</code></p></li><li><p>把<code>&amp;</code>替换<code>&amp;amp</code></p></li><li><p>把<code>&quot;</code>替换<code>&amp;quot</code></p></li><li><p>把<code>&#39;</code>替换<code>&amp;apos</code></p></li><li><p>代码div.innerHTML = userContent.replace(/&gt;/g, “&amp;lt”).replace(…)等五个替换</p></li></ul><p>减少漏洞的原则：</p><ul><li>利用模板引擎</li><li>避免内联事件</li><li>避免拼接 HTML</li><li>时刻保持警惕</li><li>增加攻击难度，降低攻击后果</li><li>主动检测和发现</li></ul><h3 id="CSRF攻击？如何预防"><a href="#CSRF攻击？如何预防" class="headerlink" title="CSRF攻击？如何预防"></a>CSRF攻击？如何预防</h3><p>Cross-site request forgery（跨站请求伪造）</p><ol><li>用户在qq.com登录</li><li>用户切换到hacker.com(恶意网站)</li><li>hacker.com发送一个qq.com/add_friend登录，让当前用户添加hacker好友</li><li>用户在不知不觉间添加了hacker为好友</li><li>用户没有想发送这个请求，hacker伪造了这个假象。</li></ol><p>避免：</p><ol><li>检查refener，qq.com可以拒绝hacker.com的请求</li><li>csrf_token 来解决</li></ol><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h3 id="转译出的文件过大怎么办？"><a href="#转译出的文件过大怎么办？" class="headerlink" title="转译出的文件过大怎么办？"></a>转译出的文件过大怎么办？</h3><ul><li>使用code split</li><li>写法 import(‘xxx’).then(xxx =&gt; { console.log(xxx) })</li><li>xxx 模块就是按需加载的</li></ul><h2 id="发散内容"><a href="#发散内容" class="headerlink" title="发散内容"></a>发散内容</h2><h3 id="从输入URL到页面展现中间发生了什么？"><a href="#从输入URL到页面展现中间发生了什么？" class="headerlink" title="从输入URL到页面展现中间发生了什么？"></a>从输入URL到页面展现中间发生了什么？</h3><ol><li>DNS查询</li><li>简历TCP连接 （三次握手）</li><li>发送HTTP请求 （请求四部分）</li><li>后台处理请求（监听端口、路由、渲染HTML模板、生成响应）</li><li>发送HTTP响应</li><li>关闭TCP连接 (四次挥手)</li><li>解析HTML</li><li>下载CSS</li><li>解析CSS</li><li>下载JS</li><li>解析JS</li><li>下载图片</li><li>解析图片</li><li>渲染DOM树</li><li>渲染样式树</li><li>执行JS</li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Vue的可复用性和组合</title>
      <link href="/2019/11/21/Vue%E7%9A%84%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%80%A7%E5%92%8C%E7%BB%84%E5%90%88/"/>
      <url>/2019/11/21/Vue%E7%9A%84%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%80%A7%E5%92%8C%E7%BB%84%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>混入(mixin)目的时分发 Vue 组件中的可复用功能。</p><h3 id="选项合并"><a href="#选项合并" class="headerlink" title="选项合并"></a>选项合并</h3><ul><li>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。</li><li>值为对象的选项，例如 <code>methods</code>、<code>components</code> 和 <code>directives</code>，将被合并为同一个对象。</li><li>两个对象键名冲突时，取组件对象的键值对。</li></ul><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>自定义指令可分全局指令和局部指令。主要通过<code>directives</code>选项。</p><h3 id="钩子指令"><a href="#钩子指令" class="headerlink" title="钩子指令"></a>钩子指令</h3><p>指令定义对象提供几个钩子函数：</p><ul><li><code>bind</code>: 只调用一次，指令第一次绑定到元素时调用</li><li><code>inserted</code>: 被绑定元素插入父节点时调用</li><li><code>update</code>: 所在组件的 VNode 更新时调用，<strong>但是可能发生在其子 VNode 更新之前</strong></li><li><code>componentUpdate</code>: 指令所在组件的 VNode 及其子 VNode 全部更新后调用</li><li><code>unbind</code>: 只调用一次，指令与元素解绑时调用。</li></ul><h3 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h3><p>除了 <code>el</code> 之外，其它参数都应该是只读的，切勿进行修改。<br>指令钩子函数会被传入以下参数：</p><ul><li><code>el</code>: 指令所绑定的元素，可以直接用来操作DOM</li><li><p><code>binding</code>: 一个对象，包含以下属性:</p><ul><li><code>name</code>: 指令名，不包括<code>v-</code>前缀</li><li><code>value</code>: 指令的绑定值</li><li><code>oldValue</code>: 指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用</li><li><code>expression</code>: 字符串形式的指令表达式</li><li><code>arg</code>: 传给指令的参数</li><li><code>modifiers</code>: 一个包含修饰符的对象</li></ul></li><li><p><code>vnode</code>: Vue 编译生成的虚拟节点</p></li><li><code>oldVnode</code>: 上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用</li></ul><h3 id="动态指令参数"><a href="#动态指令参数" class="headerlink" title="动态指令参数"></a>动态指令参数</h3><p>指令的参数可以是动态的。</p><h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h3><p>如果指令需要多个值，可以传入一个 JavaScript 对象字面量。指令函数能够接受所有合法的 JavaScript 表达式。</p><h2 id="渲染函数-amp-JSX"><a href="#渲染函数-amp-JSX" class="headerlink" title="渲染函数 &amp; JSX"></a>渲染函数 &amp; JSX</h2><h3 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h3><p>渲染函数使用 <code>render</code> 函数进行渲染。渲染函数，它比模板更接近编译器。</p><h3 id="节点、树以及虚拟-DOM"><a href="#节点、树以及虚拟-DOM" class="headerlink" title="节点、树以及虚拟 DOM"></a>节点、树以及虚拟 DOM</h3><p>浏览器解析代码时，会将其渲染成<code>DOM</code>数，DOM树下每个元素都是一个节点。</p><h3 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h3><p>虚拟DOM的出现，一开始是为了在使用MVP、MVC、MVVM等架构模式下，希望从代码组织方式来降低维护这种复杂的应用程序的难度。目的是：<strong>维护状态，更新视图</strong>。</p><p>DOM元素加载很慢的，但在JavaScript对象中处理更快。所以通过JavaScript对象中构建个DOM树结构，<br>然后可以遍历一层层的比较两棵DOM树的差异，记录差异，然后将差异应用到真正的DOM树上。</p><p>步骤：</p><ol><li>用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中</li><li>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异</li><li>把2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了</li></ol><p>Vue 通过建立一个虚拟 DOM 来追踪自己要如何改变真实 DOM。</p><p><code>return createElement(&#39;h1&#39;, this.blogTitle)</code></p><p><code>createElement</code>返回个虚拟节点(VNode),“虚拟 DOM”是我们对由 Vue 组件树建立起来的整个 VNode 树的称呼。</p><ul><li>VNode 必须唯一</li></ul><h3 id="使用-JavaScript-代替模板功能"><a href="#使用-JavaScript-代替模板功能" class="headerlink" title="使用 JavaScript 代替模板功能"></a>使用 JavaScript 代替模板功能</h3><p>只要在原生的 JavaScript (<code>if、else、map</code>)中可以轻松完成的操作，Vue 的渲染函数就不会提供专有的替代方法。没有<code>v-if、v-for、v-model</code></p><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p>用<strong>Babel插件</strong>，在Vue中使用JSX语法。它可以让我们回到更接近于模板的语法上。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Vue动画</title>
      <link href="/2019/11/20/Vue%E5%8A%A8%E7%94%BB/"/>
      <url>/2019/11/20/Vue%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="进入-离开-amp-列表过渡"><a href="#进入-离开-amp-列表过渡" class="headerlink" title="进入/离开 &amp; 列表过渡"></a>进入/离开 &amp; 列表过渡</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Vue通过以下几种方式来应用过渡效果:</p><ul><li>在 CSS 过渡和动画中自动应用 class</li><li>可以配合使用第三方 CSS 动画库，如 Animate.css</li><li>在过渡钩子函数中使用 JavaScript 直接操作 DOM</li><li>可以配合使用第三方 JavaScript 动画库，如 Velocity.js</li></ul><h3 id="单元素-组件的过渡"><a href="#单元素-组件的过渡" class="headerlink" title="单元素/组件的过渡"></a>单元素/组件的过渡</h3><p><code>transiton</code>封装组件：</p><ul><li>条件渲染 (使用 v-if)</li><li>条件展示 (使用 v-show)</li><li>动态组件</li><li>组件根节点</li></ul><h3 id="过渡的类名"><a href="#过渡的类名" class="headerlink" title="过渡的类名"></a>过渡的类名</h3><p>在进入/离开的过渡中，会有 6 个 class 切换。</p><ol><li><code>v-enter</code></li><li><code>v-enter-active</code></li><li><code>v-enter-to</code></li><li><code>v-leave</code></li><li><code>v-leave-active</code></li><li><code>v-leave-to</code></li></ol><p><code>name</code>特性在<code>&lt;transition name=&quot;my-transition&quot;&gt;</code>命名，否则默认<code>v-开头</code></p><h3 id="CSS过渡"><a href="#CSS过渡" class="headerlink" title="CSS过渡"></a>CSS过渡</h3><p>应用动画过渡，应包裹在<code>&lt;transition&gt;&lt;/transition&gt;</code>中实现。</p><h3 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h3><p>用法同CSS过渡，区别在于动画中<code>v-enter</code>类名在节点插入 DOM 后不会立即删除，而是在 <code>animationend</code> 事件触发时删除。</p><h3 id="自定义过渡的类名"><a href="#自定义过渡的类名" class="headerlink" title="自定义过渡的类名"></a>自定义过渡的类名</h3><p>通过以下特性来自定义过渡类名：</p><ul><li><code>enter-class</code></li><li><code>enter-active-class</code></li><li><code>enter-to-class</code></li><li><code>leave-class</code></li><li><code>leave-active-class</code></li><li><code>leave-to-class</code></li></ul><p>与<strong>animated.js</strong>结合使用。在自定义后，先使用<code>animated</code>,在加上其它swing等效果。<br>可以<strong>同时使用过渡和动画效果</strong>。</p><blockquote><transition name="fade" type="transition" enter-active-class="animated swing fade-enter-active" leave-active-class="animated shake fade-leave-active"><br><div v-if="show">Hello World</div><br></transition></blockquote><h3 id="同时使用过渡和动画"><a href="#同时使用过渡和动画" class="headerlink" title="同时使用过渡和动画"></a>同时使用过渡和动画</h3><p>给同一个元素设置过渡效果并同时触发，需<code>&lt;transition&gt;&lt;/transiton&gt;</code>未结束前增加<code>type=&quot;transition</code>或<code>type=&quot;animation&quot;</code>明确Vue监听。</p><h3 id="显性的过渡持续时间"><a href="#显性的过渡持续时间" class="headerlink" title="显性的过渡持续时间"></a>显性的过渡持续时间</h3><p>用 <code>&lt;transition&gt;</code>组件上的 <code>duration</code> 属性定制一个显性的过渡持续时间 (以毫秒计)：</p><h3 id="JavaScript钩子"><a href="#JavaScript钩子" class="headerlink" title="JavaScript钩子"></a>JavaScript钩子</h3><p>在<code>&lt;transiton&gt;</code>中on监听</p><ul><li>@before-enter</li><li>@enter</li><li>@after-enter</li><li>@enter-canceled</li><li>@before-leave</li><li>@leave</li><li>@after-leave</li><li>@leave-canceled</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  // --------</span><br><span class="line">  // 进入中</span><br><span class="line">  // --------</span><br><span class="line"></span><br><span class="line">  beforeEnter: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // 当与 CSS 结合使用时</span><br><span class="line">  // 回调函数 done 是可选的</span><br><span class="line">  enter: function (el, done) &#123;</span><br><span class="line">    // ...</span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterEnter: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  enterCancelled: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="使用-Velocity-js"><a href="#使用-Velocity-js" class="headerlink" title="使用 Velocity.js"></a>使用 Velocity.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 引用Velocity.js</span><br><span class="line">&lt;script src=&quot;./velocity.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  handleBtnChange() &#123;</span><br><span class="line">    this.show = !this.show</span><br><span class="line">  &#125;,</span><br><span class="line">  handleBeforeEnter(el) &#123;</span><br><span class="line">    el.style.opacity = 0;</span><br><span class="line">  &#125;,</span><br><span class="line">  handleEnter(el, done) &#123;</span><br><span class="line">    Velocity(el, &#123;</span><br><span class="line">      opacity: 1</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      duration: 1000,</span><br><span class="line">      complate: done</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  handleAfterEnter(el) &#123;</span><br><span class="line">    console.log(&apos;动画结束&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始渲染的过渡"><a href="#初始渲染的过渡" class="headerlink" title="初始渲染的过渡"></a>初始渲染的过渡</h3><p>通过 appear 特性设置节点在初始渲染的过渡<br><code>&lt;transition appear&gt;&lt;/transition&gt;</code></p><h3 id="多个元素的过渡"><a href="#多个元素的过渡" class="headerlink" title="多个元素的过渡"></a>多个元素的过渡</h3><p>可以使用<code>v-if</code>、<code>v-else</code>，通过<code>key</code>特性设置唯一来标记区分。<br>在<code>&lt;transition&gt;</code>里设置<code>key</code>值。</p><h3 id="过渡模式"><a href="#过渡模式" class="headerlink" title="过渡模式"></a>过渡模式</h3><p>在<code>&lt;transition&gt;</code>里设置<code>in-out</code>或<code>out-in</code>默认行为。</p><ul><li>in-out：新元素先进行过渡，完成之后当前元素过渡离开。</li><li>out-in：当前元素先进行过渡，完成之后新元素过渡进入。</li></ul><h3 id="多个组件的过渡"><a href="#多个组件的过渡" class="headerlink" title="多个组件的过渡"></a>多个组件的过渡</h3><p>不需要用<code>key</code>特性。使用<strong>动态组件</strong>：<br>实现动画过渡。</p><ol><li>注册全局组件或局部组件</li><li>通过<code>&lt;component :is=&quot;type&quot;</code>类似type值绑定。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// HTML</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;transition name=&quot;fade&quot; mode=&quot;out-in&quot;&gt;</span><br><span class="line">    &lt;component :is=&quot;type&quot;&gt;</span><br><span class="line">    &lt;child v-if=&quot;show&quot;&gt;&lt;/child&gt;</span><br><span class="line">    &lt;child-one v-else&gt;&lt;/child-one&gt;</span><br><span class="line">    &lt;/component&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">  &lt;button @click=&quot;handleBtnChange&quot;&gt;切换&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// JS </span><br><span class="line"></span><br><span class="line">Vue.component(&apos;child&apos;, &#123;</span><br><span class="line">    template: &apos;&lt;div&gt;child&lt;/div&gt;&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">  Vue.component(&apos;child-one&apos;, &#123;</span><br><span class="line">    template: &apos;&lt;div&gt;child-one&lt;/div&gt;&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">  var vm = new Vue(&#123;</span><br><span class="line">    el: &apos;#root&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      type: &apos;child&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleBtnChange() &#123;</span><br><span class="line">        this.type = this.type === &apos;child&apos; ? &apos;child-one&apos; : &apos;child&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// CSS</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .fade-enter,</span><br><span class="line">  .fade-leave-to &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .fade-enter-active,</span><br><span class="line">  .fade-leave-active &#123;</span><br><span class="line">    transition: opacity 2s;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="列表过渡"><a href="#列表过渡" class="headerlink" title="列表过渡"></a>列表过渡</h3><p>渲染整个列表，使用<code>v-for</code>，使用 <transition-group> 组件，需要设置<code>key</code>值。</transition-group></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;transition-group&gt;</span><br><span class="line">  &lt;div v-for=&quot;item of list&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">    &#123;&#123;item.title&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/transition-group&gt;</span><br></pre></td></tr></table></figure><h3 id="列表的排序过渡"><a href="#列表的排序过渡" class="headerlink" title="列表的排序过渡"></a>列表的排序过渡</h3><p><code>&lt;transition-group&gt;</code>中使用<code>v-move</code>特性。在元素的改变定位的过程中应用。也可以通过<code>name</code>属性定义自定义前缀。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Vue-note</title>
      <link href="/2019/11/19/Vue-note/"/>
      <url>/2019/11/19/Vue-note/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue学习笔记"><a href="#Vue学习笔记" class="headerlink" title="Vue学习笔记"></a>Vue学习笔记</h2><h3 id="Vue-js是什么"><a href="#Vue-js是什么" class="headerlink" title="Vue.js是什么"></a>Vue.js是什么</h3><p>Vue是一套用于构造用户界面的<strong>渐进式框架</strong>，遵循<code>MVVM</code>模型。<br>Model(模型)：数据保存 View(视图): 用户界面。<br>采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel上，反之亦然。<br><img src="https://i.niupic.com/images/2019/11/19/_1151.png" alt="MVVM"></p><h3 id="Vue特性"><a href="#Vue特性" class="headerlink" title="Vue特性"></a>Vue特性</h3><h4 id="v-bind绑定"><a href="#v-bind绑定" class="headerlink" title="v-bind绑定"></a>v-bind绑定</h4><p><code>v-bind:title=&quot;message&quot;</code><br>  将这个元素节点的 title 特性和 Vue 实例的 message 属性保持一致。</p><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p><code>&lt;li v-for=&quot;todo of todos&quot;&gt;&lt;/li&gt;</code><br>  绑定数组的数据来渲染一个项目列表</p><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p><code>&lt;button v-on:click=&quot;reverseMessage&quot;&gt;反转消息&lt;/button&gt;</code><br>  添加一个事件监听器，通过它调用在 Vue 实例中定义的方法</p><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p><code>&lt;input v-model=&quot;message&quot;&gt;</code><br>  实现表单输入和应用状态之间的双向绑定</p><h3 id="组件化应用构建"><a href="#组件化应用构建" class="headerlink" title="组件化应用构建"></a>组件化应用构建</h3><p>  在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。分为<strong>全局组件和局部组件</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 定义名todo-item的全局组件</span><br><span class="line">// JS</span><br><span class="line">Vue.component(&apos;todo-item&apos;, &#123;</span><br><span class="line">  props: [&apos;content&apos;], // 接收父组件向子组件传递数据</span><br><span class="line">  template: &apos;&lt;li @delete=&quot;handleItemClick&quot;&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;&apos;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleItemClick() &#123;</span><br><span class="line">      this.$emit(&apos;delete&apos;, index) // 通过$emit实例属性触发事件。将子组件数据和索引传递给父组件</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 构建另一个组件模板</span><br><span class="line">// HTML</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">  &lt;!-- 创建一个 todo-item 组件的实例 --&gt;</span><br><span class="line">  &lt;todo-item v-bind:content=&quot;item&quot; </span><br><span class="line">              v-bind:index=&quot;index&quot; </span><br><span class="line">              &quot;v-for=&quot;(item,index) in list&quot;&gt;</span><br><span class="line">  &lt;/todo-item&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure><p>  从父作用域将数据传到子组件: <strong>props接口</strong><br>  从子作用域将数据传到父组件: <strong>$emit实例属性</strong></p><h3 id="Vue实例"><a href="#Vue实例" class="headerlink" title="Vue实例"></a>Vue实例</h3><h4 id="创建一个Vue实例"><a href="#创建一个Vue实例" class="headerlink" title="创建一个Vue实例"></a>创建一个Vue实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  // 选项</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  vm(ViewModel)这个变量名便是Vue实例</p><h4 id="数据与方法"><a href="#数据与方法" class="headerlink" title="数据与方法"></a>数据与方法</h4><p>  实例中<code>data</code>中的属性是响应式，使用<code>Object.freeze()</code>，这会阻止修改现有的属性，也意味着响应系统无法再追踪变化。<br>  <code>$</code>表示Vue实例</p><h4 id="实例生命周期钩子"><a href="#实例生命周期钩子" class="headerlink" title="实例生命周期钩子"></a>实例生命周期钩子</h4><p>  生命周期函数就是Vue在某一个时间点会自动执行的函数<br>  <img src="https://i.niupic.com/images/2019/11/19/_1154.png" alt="生命周期钩子"></p><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><h4 id="v-once绑定"><a href="#v-once绑定" class="headerlink" title="v-once绑定"></a>v-once绑定</h4><p><code>&lt;span v-once&gt;这个将不会改变: &lt;/span&gt;</code><br>  执行一次性地插值</p><h4 id="v-html、v-text"><a href="#v-html、v-text" class="headerlink" title="v-html、v-text"></a>v-html、v-text</h4><p>  一般情况下，解释是相同的普通文本，但遇到有标签时，则需要使用<code>v-html</code></p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p><code>&lt;a v-bind:href=&quot;url&quot;&gt;...&lt;/a&gt;</code><br><code>href</code>是参数，告知 v-bind 指令将该元素的 href 特性与表达式 url 的值绑定。</p><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p><code>.</code>指明的特殊后缀，用于指出一个指令应该以特殊方式绑定</p><h3 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h3><ol><li>计算属性(computed),有缓存机制，有利于性能优化。计算属性是基于它们的响应式依赖进行缓存的。</li></ol><ul><li><p>setter</p></li><li><p>getter(默认)</p></li></ul><ol start="2"><li>侦听器(watch)，没有缓存机制，浪费性能。当需要在数据变化时执行异步或开销较大的操作时。</li></ol><h3 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h3><h4 id="绑定-HTML-Class"><a href="#绑定-HTML-Class" class="headerlink" title="绑定 HTML Class"></a>绑定 HTML Class</h4><ol><li>对象语法</li></ol><p><code>&lt;div v-bind:class=&quot;{ active: isActive }&quot;&gt;&lt;/div&gt;</code> </p><ol start="2"><li>数组语法</li></ol><p><code>&lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;&lt;/div&gt;</code></p><h4 id="绑定-HTML-Style"><a href="#绑定-HTML-Style" class="headerlink" title="绑定 HTML Style"></a>绑定 HTML Style</h4><ol><li>对象语法</li></ol><p><code>&lt;div v-bind:style=&quot;styleObject&quot;&gt;&lt;/div&gt;</code></p><ol start="2"><li>数组语法</li></ol><p><code>&lt;div v-bind:style=&quot;[baseStyles, overridingStyles]&quot;&gt;&lt;/div&gt;</code></p><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><h4 id="v-if、v-else-if和v-else"><a href="#v-if、v-else-if和v-else" class="headerlink" title="v-if、v-else-if和v-else"></a>v-if、v-else-if和v-else</h4><p><code>&lt;h1 v-if=&quot;awesome&quot;&gt;Vue is awesome!&lt;/h1&gt;</code><br><code>&lt;h1 v-else&gt;Oh no 😢&lt;/h1&gt;</code><br>  指令的表达式<code>awesome</code>返回true时渲染，否则渲染else语句，<code>v-else-if</code>可以连续使用</p><h4 id="用-key-管理可复用的元素"><a href="#用-key-管理可复用的元素" class="headerlink" title="用 key 管理可复用的元素"></a>用 key 管理可复用的元素</h4><p>  目的是使Vue尽可能高效地渲染元素。</p><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p><code>&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;</code><br>  根据条件展示元素,不同其它，始终会被渲染并保留在 DOM 中。</p><h4 id="v-if-与-v-show-的区别"><a href="#v-if-与-v-show-的区别" class="headerlink" title="v-if 与 v-show 的区别"></a>v-if 与 v-show 的区别</h4><ol><li>当<code>v-if</code>为false时，不会渲染，为true时渲染，能确保在切换过程中销毁和重建。</li><li><code>v-show</code>总是被渲染。</li><li><code>v-if</code>有更高的切换开销。<code>v-show</code>则更高的初始渲染开销。频繁切换，使用<code>v-show</code>，条件少使用<code>v-if</code>。</li></ol><h4 id="v-for-与-v-if-同时使用"><a href="#v-for-与-v-if-同时使用" class="headerlink" title="v-for 与 v-if 同时使用"></a>v-for 与 v-if 同时使用</h4><p><strong>注： 不推荐同时使用。v-for 具有比 v-if 更高的优先级</strong></p><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><h4 id="用-v-for-把一个数组对应为一组元素"><a href="#用-v-for-把一个数组对应为一组元素" class="headerlink" title="用 v-for 把一个数组对应为一组元素"></a>用 v-for 把一个数组对应为一组元素</h4><p><code>v-for</code>基于一个数组来渲染一个列表.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;ul id=&quot;example-1&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;(item,index) of items&quot; v-bind:key=&quot;item.id&quot;&gt;</span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p><code>items</code> 是<strong>源数据数组</strong>，而 <code>item</code> 则是<strong>被迭代的数组元素的别名</strong>,<code>index</code>当前项的索引。<br>在 <code>v-for</code> 块中，我们可以访问所有父作用域的属性</p><h4 id="在-v-for-里使用对象"><a href="#在-v-for-里使用对象" class="headerlink" title="在 v-for 里使用对象"></a>在 v-for 里使用对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;v-for-object&quot; class=&quot;demo&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;(value,name，index) in object&quot;&gt;</span><br><span class="line">   &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p><code>value</code>是键值，<code>name</code>是键名，<code>index</code>是索引<br><strong>记住得使用 <code>v-for</code> 时提供 <code>key attribute</code>，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。</strong></p><h4 id="变异方法"><a href="#变异方法" class="headerlink" title="变异方法"></a>变异方法</h4><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul><h4 id="非变异方法、替换数组"><a href="#非变异方法、替换数组" class="headerlink" title="非变异方法、替换数组"></a>非变异方法、替换数组</h4><ul><li>filter()</li><li>concat()</li><li><p>slice()<br>它们不会改变原始数组，而总是返回一个<strong>新数组</strong>。当使用非变异方法时，可以用新数组替换旧数组。<br>注意：在对象或数组中，不可以直接设置或利用索引来修改数据，因为不是响应式。为了在修改数据时页面同时变化，可：<br>对象:</p><ol><li>直接改变对象引用</li><li>通过Vue全局方法<code>Vue.set( )</code>或Vue实例<code>vm.$set()</code></li></ol></li></ul><p>数组:</p><ol><li>直接改变数组引用</li><li>通过数组变异方法<br>3，通过Vue全局方法<code>Vue.set( )</code>或Vue实例<code>vm.$set()</code></li></ol><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><h4 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h4><p><code>v-on</code>监听 DOM 事件</p><h4 id="事件处理方法"><a href="#事件处理方法" class="headerlink" title="事件处理方法"></a>事件处理方法</h4><p>v-on 还可以接收一个需要调用的方法名称</p><h4 id="内联处理器中的方法"><a href="#内联处理器中的方法" class="headerlink" title="内联处理器中的方法"></a>内联处理器中的方法</h4><p>在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 <code>$event</code> 把它传入方法.<br><code>$event</code>访问原始DOM事件</p><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><ul><li>.stop  <code>&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</code> // 阻止单击事件继续传播</li><li>.prevent  <code>&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</code> // 提交事件不再重载页面</li><li>.capture <code>&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</code> // 添加事件监听器时使用事件捕获模式</li><li>.self <code>&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</code> //  只当在 event.target 是当前元素自身时触发处理函数</li><li>.once <code>&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</code> // 点击事件将只会触发一次</li><li>.passive  <code>&lt;div v-on:scroll.passive=&quot;onScroll&quot;&gt;...&lt;/div&gt;</code> // 不拦截默认preventDefault事件,阻止默认动作,能够提升移动端的性能。<br><strong>修饰符可以串联，并且顺序很重要；相应的代码会以同样的顺序产生。</strong></li></ul><h4 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a>系统修饰键</h4><ul><li>.ctrl</li><li>.alt</li><li>.shift</li><li>.meta</li><li>.exact</li></ul><p><code>&lt;input @keyup.alt.67=&quot;clear&quot;&gt;</code> // Alt + C<br><code>&lt;div @click.ctrl=&quot;doSomething&quot;&gt;Do something&lt;/div&gt;</code> //  Ctrl + Click</p><h4 id="鼠标按钮修饰符"><a href="#鼠标按钮修饰符" class="headerlink" title="鼠标按钮修饰符"></a>鼠标按钮修饰符</h4><ul><li>.left</li><li>.right</li><li>.middle</li></ul><h4 id="为什么在HTML中使用v-on监听事件"><a href="#为什么在HTML中使用v-on监听事件" class="headerlink" title="为什么在HTML中使用v-on监听事件"></a>为什么在HTML中使用v-on监听事件</h4><p>主要Vue中遵循MVVM模式，将Vue.js事件处理方法和表达式都严格绑定在当前视图的ViewModel上,不会导致维护上的困难。<br>好处:</p><ol><li>代码清晰</li><li>无需手动绑定JavaScript事件，DOM完全解耦，易于测试。</li><li>ViewModel 被销毁时，所有的事件处理器都会自动被删除。</li></ol><h3 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h3><p><code>v-model</code>双向绑定，负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。<br>通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p><ul><li>.lazy  转变为使用 change 事件进行同步</li><li>.number  自动将用户的输入值转为数值类型</li><li>.trim 自动过滤用户输入的首尾空白字符</li></ul><h3 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h3><p>组件是可复用的Vue实例。</p><h4 id="组件的复用"><a href="#组件的复用" class="headerlink" title="组件的复用"></a>组件的复用</h4><p>每次使用一个组件，代表它的新的实例被创建。</p><h4 id="data必须是一个函数"><a href="#data必须是一个函数" class="headerlink" title="data必须是一个函数"></a>data必须是一个函数</h4><p>一个组件的<code>data</code>选项必然是一个函数，并返回一个对象。</p><h4 id="组件的组织"><a href="#组件的组织" class="headerlink" title="组件的组织"></a>组件的组织</h4><p>全局注册(<code>Vue.component()</code>)和局部注册(<code>var Component = { /* ... */ }</code>)。</p><h4 id="父组件通过Prop向子组件传递数据"><a href="#父组件通过Prop向子组件传递数据" class="headerlink" title="父组件通过Prop向子组件传递数据"></a>父组件通过Prop向子组件传递数据</h4><ol><li>一个组件默认可以拥有任意数量的 <code>prop</code>特性，任何值都可以传递给任何 <code>prop</code>。</li><li><strong>当父组件通过属性来传递数据时，子组件则需要通过<code>prop</code>来接收数据。</strong></li><li><strong>可以使用<code>v-bind</code>动态的传递<code>prop</code></strong></li></ol><h4 id="单个根元素"><a href="#单个根元素" class="headerlink" title="单个根元素"></a>单个根元素</h4><p>每个组件必须只有一个根元素</p><h4 id="监听子组件事件"><a href="#监听子组件事件" class="headerlink" title="监听子组件事件"></a>监听子组件事件</h4><p><strong>子组件向父组件传值时，通过<code>$emit</code>方法触发事件,使父组件可监听事件。</strong></p><h4 id="使用事件抛出一个值"><a href="#使用事件抛出一个值" class="headerlink" title="使用事件抛出一个值"></a>使用事件抛出一个值</h4><p><code>&quot;$emit(&#39;enlarge-text&#39;, 0.1)&quot;&gt;</code><br>第一个参数定义监听的事件，第二个参数来给一个特定的值。<br>当父级组件监听这个函数时，可通过<code>$event</code>访问被抛去的这个值。</p><h4 id="在组件中使用v-model"><a href="#在组件中使用v-model" class="headerlink" title="在组件中使用v-model"></a>在组件中使用v-model</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// JS</span><br><span class="line">Vue.component(&apos;custom-input&apos;, &#123;</span><br><span class="line">  props: [&apos;value&apos;],</span><br><span class="line">  template: `</span><br><span class="line">    &lt;input</span><br><span class="line">      v-bind:value=&quot;value&quot;</span><br><span class="line">      v-on:input=&quot;$emit(&apos;input&apos;, $event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// HTML</span><br><span class="line">&lt;custom-input v-model=&quot;searchText&quot;&gt;&lt;/custom-input&gt;</span><br></pre></td></tr></table></figure><ul><li>将其 <code>value</code> 特性绑定到一个名叫 <code>value</code> 的 prop 上</li><li>在其 <code>input</code> 事件被触发时，将新的值通过自定义的 <code>input</code> 事件抛出</li></ul><h4 id="通过插槽分发内容"><a href="#通过插槽分发内容" class="headerlink" title="通过插槽分发内容"></a>通过插槽分发内容</h4><p><code>&lt;slot&gt;</code>插槽, <code>slot</code>特性可具名插槽。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.component(&apos;child&apos;, &#123;</span><br><span class="line">     template: `&lt;div&gt;</span><br><span class="line">       &lt;slot slot=&quot;header&quot;&gt;默认header&lt;/slot&gt;</span><br><span class="line">       &lt;div class=&quot;content&quot;&gt;content&lt;/div&gt;</span><br><span class="line">       &lt;slot slot=&quot;footer&quot;&gt;默认footer&lt;/slot&gt;</span><br><span class="line">       &lt;/div&gt;`</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><p>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。<br><code>v-slot</code>新语法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// JS</span><br><span class="line">&lt;template v-slot=&quot;props&quot;&gt;</span><br><span class="line">  &lt;li&gt;&#123;&#123;props.content&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><h4 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h4><p>通过 Vue 的 <code>&lt;component&gt;</code> 元素加一个特殊的 <code>is</code> 特性来实现</p><h3 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h3><p><code>Vue.component(&#39;my-component-name&#39;, { /* ... */ })</code><br>第一个参数为组件名。可大小写，<code>kebab-case</code>和<code>PascalCase</code>。</p><h4 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h4><p><code>import</code> 和 <code>export</code><br>在局部注册之前导入每个你想使用的组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// Component B.js 在B组件中引用组件A和组件C</span><br><span class="line"></span><br><span class="line">import ComponentA from &apos;./ComponentA&apos;</span><br><span class="line">import ComponentC from &apos;./ComponentC&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentA,</span><br><span class="line">    ComponentC</span><br><span class="line">  &#125;,</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="基础组件的自动化全局注册"><a href="#基础组件的自动化全局注册" class="headerlink" title="基础组件的自动化全局注册"></a>基础组件的自动化全局注册</h4><p>全局注册的行为必须在根 Vue 实例 (通过 <code>new Vue</code>) 创建之前发生</p><h3 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h3><h4 id="Prop类型"><a href="#Prop类型" class="headerlink" title="Prop类型"></a>Prop类型</h4><p>以对象形式指定类型：<strong>字符串、数值、布尔值、数组、对象、函数、Promise函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">props: &#123;</span><br><span class="line">  title: String,</span><br><span class="line">  likes: Number,</span><br><span class="line">  isPublished: Boolean,</span><br><span class="line">  commentIds: Array,</span><br><span class="line">  author: Object,</span><br><span class="line">  callback: Function,</span><br><span class="line">  contactsPromise: Promise // or any other constructor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="传递静态或动态-Prop"><a href="#传递静态或动态-Prop" class="headerlink" title="传递静态或动态 Prop"></a>传递静态或动态 Prop</h4><p><code>&lt;blog-post title=&quot;My journey with Vue&quot;&gt;&lt;/blog-post&gt;</code><br>title属性定义值。<br><code>&lt;blog-post v-bind:title=&quot;post.title&quot;&gt;&lt;/blog-post&gt;</code><br><code>v-bind</code>动态绑定赋值</p><h4 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h4><p>所有的 prop 都使得其父子 prop 之间形成了一个<strong>单向下行绑定</strong>：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。</p><p><strong>改变prop，非父子组件传值：</strong></p><ol><li><p>这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。</p></li><li><p>这个 prop 以一种原始的值传入且需要进行转换。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// HTML</span><br><span class="line"> &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;child content=&quot;Dell&quot;&gt;&lt;/child&gt; // 初始值</span><br><span class="line">    &lt;child content=&quot;Lee&quot;&gt;&lt;/child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// JS</span><br><span class="line"> Vue.prototype.bus = new Vue() // 观察者模式、bus模式、发布-订阅模式</span><br><span class="line"></span><br><span class="line">    var child = &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        content: String  // prop类型验证</span><br><span class="line">      &#125;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          selfContent: this.content // 本地prop数据</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      template: &apos;&lt;div @click=&quot;handleClick&quot;&gt;&#123;&#123;selfContent&#125;&#125;&lt;/div&gt;&apos;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        handleClick() &#123;</span><br><span class="line">          this.bus.$emit(&apos;change&apos;, this.selfContent)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      mounted() &#123;</span><br><span class="line">          var this_ = this</span><br><span class="line">          this.bus.$on(&apos;change&apos;, function(msg) &#123;</span><br><span class="line">            this_.selfContent = msg</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#root&apos;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        child: child</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h4><p><code>type</code> 可以是下列原生构造函数中的一个：type 还可以是一个自定义的构造函数</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Array</li><li>Object</li><li>Date</li><li>Function</li><li>Symbol</li></ul><h4 id="非-Prop-的特性"><a href="#非-Prop-的特性" class="headerlink" title="非 Prop 的特性"></a>非 Prop 的特性</h4><p>一个非 prop 特性是指传向一个组件，但是该组件并没有相应 prop 定义的特性。</p><h4 id="禁用特性继承"><a href="#禁用特性继承" class="headerlink" title="禁用特性继承"></a>禁用特性继承</h4><p>组件的选项中设置 <code>inheritAttrs: false</code><br>这尤其适合配合实例的 <code>$attrs</code> 属性使用，该属性包含了传递给一个组件的特性名和特性值,不会影响 style 和 class 的绑定。</p><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p>将原生事件绑定到组件: 在使用<code>v-on</code>的<code>.native</code>修饰符</p><h4 id="sync-修饰符"><a href="#sync-修饰符" class="headerlink" title=".sync 修饰符"></a>.sync 修饰符</h4><p>当我们用一个对象同时设置多个 prop 的时候，也可以将这个 <code>.sync</code> 修饰符和 <code>v-bind</code> 配合使用：<br><code>&lt;text-document v-bind.sync=&quot;doc&quot;&gt;&lt;/text-document&gt;</code></p><h3 id="动态组件-amp-异步组件"><a href="#动态组件-amp-异步组件" class="headerlink" title="动态组件 &amp; 异步组件"></a>动态组件 &amp; 异步组件</h3><h4 id="在动态组件上使用-keep-alive"><a href="#在动态组件上使用-keep-alive" class="headerlink" title="在动态组件上使用 keep-alive"></a>在动态组件上使用 keep-alive</h4><p>用一个 <keep-alive> 元素将其动态组件包裹起来，重新创建动态组件。利用缓存(第一次)机制。</keep-alive></p><h4 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h4><p>工厂函数会异步解析你的组件定义,把结果缓存起来供未来重渲染。</p><h3 id="处理边界问题"><a href="#处理边界问题" class="headerlink" title="处理边界问题"></a>处理边界问题</h3><h4 id="访问元素-amp-组件"><a href="#访问元素-amp-组件" class="headerlink" title="访问元素 &amp; 组件"></a>访问元素 &amp; 组件</h4><ol><li>访问根实例<code>$root</code></li><li>访问父组件实例<code>$parent</code></li><li>访问子组件实例或子元素<code>$refs</code></li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>算法排序</title>
      <link href="/2019/08/12/%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/08/12/%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>引用：(排序算法)[<a href="https://www.cnblogs.com/onepixel/p/7674659.html]" target="_blank" rel="noopener">https://www.cnblogs.com/onepixel/p/7674659.html]</a></p><h2 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h2><p>它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var arr = [2,4,23,52,15,73,26]</span><br><span class="line"></span><br><span class="line">function bubbleSort(arr) &#123;</span><br><span class="line">  var len = arr.length</span><br><span class="line">  for(let i = 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">    for(let j = 0; j &lt; len - 1 - i; j++) &#123;</span><br><span class="line">      if(arr[j] &gt; arr[j + 1]) &#123;  // 相邻元素两两对比</span><br><span class="line">        var temp = arr[j + 1]  // 元素交换</span><br><span class="line">        arr[j + 1] = arr[j]</span><br><span class="line">        arr[j] = temp</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序（Selection-Sort）"><a href="#选择排序（Selection-Sort）" class="headerlink" title="选择排序（Selection Sort）"></a>选择排序（Selection Sort）</h2><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var arr = [2,4,23,52,15,73,26]</span><br><span class="line"></span><br><span class="line">function selectionSort(arr) &#123;</span><br><span class="line">  var len = arr.length</span><br><span class="line">  var minIndex, temp</span><br><span class="line">  for(let i = 0; i &lt; len -1; i++) &#123;</span><br><span class="line">    minIndex = i</span><br><span class="line">    for(let j = i + 1; j &lt; len; j++) &#123;</span><br><span class="line">      if(arr[j] &lt; arr[minIndex]) &#123; // 寻找最小的数</span><br><span class="line">        minIndex = j   // 将最小数的索引保存</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = arr[i]</span><br><span class="line">    arr[i] = arr[minIndex]</span><br><span class="line">    arr[minIndex] = temp</span><br><span class="line">  &#125;</span><br><span class="line">  return arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序-（Insertion-Sort）"><a href="#插入排序-（Insertion-Sort）" class="headerlink" title="插入排序 （Insertion Sort）"></a>插入排序 （Insertion Sort）</h2><p>它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var arr = [2,4,23,52,15,73,26]</span><br><span class="line"></span><br><span class="line">function insertionSort(arr) &#123;</span><br><span class="line">    var len = arr.length;</span><br><span class="line">    var preIndex, current;</span><br><span class="line">    for (var i = 1; i &lt; len; i++) &#123;</span><br><span class="line">        preIndex = i - 1;</span><br><span class="line">        current = arr[i];</span><br><span class="line">        while (preIndex &gt;= 0 &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">            arr[preIndex + 1] = arr[preIndex];</span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[preIndex + 1] = current;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序-（Shell-Sort）"><a href="#希尔排序-（Shell-Sort）" class="headerlink" title="希尔排序 （Shell Sort）"></a>希尔排序 （Shell Sort）</h2><p>是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var arr = [2,4,23,52,15,73,26]</span><br><span class="line"></span><br><span class="line">function shellSort(arr) &#123;</span><br><span class="line">    var len = arr.length;</span><br><span class="line">    for (var gap = Math.floor(len / 2); gap &gt; 0; gap = Math.floor(gap / 2)) &#123;</span><br><span class="line">        for (var i = gap; i &lt; len; i++) &#123;</span><br><span class="line">            var j = i;</span><br><span class="line">            var current = arr[i];</span><br><span class="line">            while (j - gap &gt;= 0 &amp;&amp; current &lt; arr[j - gap]) &#123;</span><br><span class="line">                 arr[j] = arr[j - gap];</span><br><span class="line">                 j = j - gap;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] = current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序-（Merge-Sort）"><a href="#归并排序-（Merge-Sort）" class="headerlink" title="归并排序 （Merge Sort）"></a>归并排序 （Merge Sort）</h2><p>采用分治法，将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">var arr = [2,4,23,52,15,73,26]</span><br><span class="line"></span><br><span class="line">function mergeSort(arr) &#123;</span><br><span class="line">  var len = arr.length</span><br><span class="line">  if(len &lt; 2 ) &#123;</span><br><span class="line">    return arr</span><br><span class="line">  &#125;</span><br><span class="line">  var middle = Math.floor(len / 2)</span><br><span class="line">  var left = arr.slice(0, middle)</span><br><span class="line">  var right = arr.slice(middle)</span><br><span class="line">  return merge(mergeSort(left), mergeSort(right))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function merge(left, right) &#123;</span><br><span class="line">  var result = []</span><br><span class="line"></span><br><span class="line">  while(left.length &gt; 0 &amp;&amp; right.length &gt; 0) &#123;</span><br><span class="line">    if(left[0] &lt;= right[0]) &#123;</span><br><span class="line">      result.push(left.shift())</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      result.push(right.shift())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  while (left.length) &#123;</span><br><span class="line">    result.push(left.shift())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  while (right.length) &#123;</span><br><span class="line">    result.push(right.shift())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h2><p>通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var arr = [2,4,23,52,15,73,26]</span><br><span class="line"></span><br><span class="line"> var len = arr.length,</span><br><span class="line">        partitionIndex,</span><br><span class="line">        left = typeof left != &apos;number&apos; ? 0 : left,</span><br><span class="line">        right = typeof right != &apos;number&apos; ? len - 1 : right;</span><br><span class="line"> </span><br><span class="line">    if (left &lt; right) &#123;</span><br><span class="line">        partitionIndex = partition(arr, left, right);</span><br><span class="line">        quickSort(arr, left, partitionIndex-1);</span><br><span class="line">        quickSort(arr, partitionIndex+1, right);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function partition(arr, left, right) &#123;</span><br><span class="line">  var pivot = left; // 设定基准值</span><br><span class="line">  var index = pivot + 1</span><br><span class="line">  for(var i = index; i &lt;= right; i++) &#123;</span><br><span class="line">    if(arr[i] &lt; arr[pivot]&gt;) &#123;</span><br><span class="line">      swap(arr, i , index)</span><br><span class="line">      index++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  swap(arr, pivot, index -1)</span><br><span class="line">  return index -1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function swap(arr, i ,j) &#123;</span><br><span class="line">  var temp = arr[i]</span><br><span class="line">  arr[i] = arr[j]</span><br><span class="line">  arr[j] = temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>ES6新特性</title>
      <link href="/2019/07/31/ES6%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2019/07/31/ES6%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>参考：<br><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰ES6</a>   <a href="https://fangyinghang.com/es-6-tutorials/" target="_blank" rel="noopener">ES6-MDN</a></p><h2 id="let-和-const命令"><a href="#let-和-const命令" class="headerlink" title="let 和 const命令"></a>let 和 const命令</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ol><li><code>let</code> 的作用域在最新的{}之间</li><li>如果在<code>let a</code> 之前使用了a，那么报错</li><li>如果重复声明<code>let a</code>，那么报错</li></ol><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ol><li><code>let</code> 的作用域在最新的{}之间</li><li>如果在<code>let a</code> 之前使用了a，那么报错</li><li>如果重复声明<code>let a</code>，那么报错</li><li>只有一次赋值的机会，而且必须在声明的时候立马赋值</li></ol><h2 id="函数与对象的语法糖"><a href="#函数与对象的语法糖" class="headerlink" title="函数与对象的语法糖"></a>函数与对象的语法糖</h2><h3 id="将伪数组转为真数组方法"><a href="#将伪数组转为真数组方法" class="headerlink" title="将伪数组转为真数组方法"></a>将伪数组转为真数组方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function sum(message, ...numbers) &#123;</span><br><span class="line">  `let args = Array.prototype.slice.call(argumengs)` // ES5</span><br><span class="line">  `let args = Array.from(argumengs)` // ES6</span><br><span class="line">  `let args = [...argumeng]` // ES6</span><br><span class="line">  resule = numbers.reduce( (p , v ) =&gt; p + v, 0)</span><br><span class="line">  return message + result</span><br><span class="line">&#125;</span><br><span class="line">sum(&apos;结果是: &apos;, 1,2,3,4,5) // 15</span><br></pre></td></tr></table></figure><h3 id="展开操作"><a href="#展开操作" class="headerlink" title="展开操作"></a>展开操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[...iterableObj] = [1, 3, 5, 7, 9]; </span><br><span class="line">[0, 2, `...iterableObj`, 4, 6, 8];</span><br></pre></td></tr></table></figure><h3 id="结构赋值"><a href="#结构赋值" class="headerlink" title="结构赋值"></a>结构赋值</h3><blockquote><p>[a, b] = [b, a]<br>[a, b, …rest] = [10, 20, 30, 40, 50]<br>let {name, age} = frank<br>[a=5, b=7] = [1];<br>[a, b] = f()<br>[a, , b] = f();<br>{p: foo, q: bar} = o<br>let {a = 10, b = 5} = {a: 3};<br>let {a:aa = 10, b:bb = 5} = {a: 3};<br>对象浅拷贝<br>let objB = Object.assign({}, objA) // ES5<br>let objB = <code>{...objA}</code> // ES6<br>对象合并<br>let objB = Object.assign({}, objA, objC) // ES5<br>let objB = <code>{...objA, ...objC}</code> // ES6</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC" target="_blank" rel="noopener">MDN 上更多的例子</a></p><h3 id="对象属性加强"><a href="#对象属性加强" class="headerlink" title="对象属性加强"></a>对象属性加强</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">obj = &#123; x, y &#125; // obj = &#123;x:x, y: y&#125;</span><br><span class="line">obj = &#123;[&quot;baz&quot; + quux() ]: 42&#125;</span><br><span class="line">函数属性可以缩写</span><br></pre></td></tr></table></figure><h2 id="新的字符串"><a href="#新的字符串" class="headerlink" title="新的字符串"></a>新的字符串</h2><ol><li>多行字符串<strong><code></code></strong></li><li>字符串里插入变量（插值）<strong><code>${}</code></strong></li><li>函数接字符串</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fn`$&#123;name&#125; 是一个 $&#123;person&#125;`</span><br></pre></td></tr></table></figure><h2 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a>迭代器与生成器</h2><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>返回一个包含<code>value</code>和<code>done</code>两个属性的对象。其中，value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function makeIterator() &#123;</span><br><span class="line">  var _value = 0</span><br><span class="line">  var max = 10</span><br><span class="line">  return &#123;</span><br><span class="line">    next: function() &#123;</span><br><span class="line">      _value += 1</span><br><span class="line">      if(_value &gt; max) &#123;throw new Errow(&apos;超出最大值&apos;)&#125;</span><br><span class="line"></span><br><span class="line">      if(_value === max) &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          value: _value,</span><br><span class="line">          done: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          value: _value</span><br><span class="line">          done: false</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a = makeIterator()</span><br><span class="line">a.next() // 超出10之后就提示错误</span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>生成器函数提供了一个强大的选择：它允许你定义一个包含自有迭代算法的函数， 同时它可以自动维护自己的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function* makeRangeIterator(start = 0, end = 100, step = 1) &#123;</span><br><span class="line">    for (let i = start; i &lt; end; i += step) &#123;</span><br><span class="line">        yield i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h3><p>使用<code>for...of</code>循环遍历某种数据结构时，该循环会自动去寻找 Iterator 接口。<br>实现可迭代 <code>Symbol.iterator</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var myIterable = &#123;</span><br><span class="line">  *[Symbol.iterator]() &#123;</span><br><span class="line">    yield 1;</span><br><span class="line">    yield 2;</span><br><span class="line">    yield 3;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (let value of myIterable) &#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br></pre></td></tr></table></figure><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><ol><li><code>let a = Symbol()</code> Symbol是一个全局属性</li><li>不能使用<code>new Symbol()</code></li><li>从Symbol()返回的symbol值都是唯一的 Symbol() !== Symbol()</li><li>Symbol创建一个私有属性 Object[Symbol()] === xxx</li></ol><h3 id="Set对象"><a href="#Set对象" class="headerlink" title="Set对象"></a>Set对象</h3><p>储存任何对象的的唯一值，无论原始值或者是对象引用</p><p><strong>数组去重：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var a = [1,2,3,5,6,3,5,2,4,2,2,3]</span><br><span class="line"></span><br><span class="line">function uniq(array) &#123;</span><br><span class="line">  var result = []</span><br><span class="line">  var hash = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  for(let i =0; i &lt; array.length; i++) &#123;</span><br><span class="line">    hash[array[i]] = true</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  for(let key in hash) &#123;</span><br><span class="line">    result.push(key)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br><span class="line">uniq(a)</span><br></pre></td></tr></table></figure><p><strong>缺点：</strong></p><ul><li>无法区分数字或字符串</li><li>不能去重对象</li></ul><p><strong>去重优化：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var a = [1,2,3,5,6,3,5,2,4,2,2,3]</span><br><span class="line"></span><br><span class="line">function uniq(array) &#123;</span><br><span class="line">  return Array.from(new Set(array)) // ES6 转化数组</span><br><span class="line">  return [...new Set(array)] // 第二种方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uniq(a)</span><br></pre></td></tr></table></figure><h3 id="Map对象"><a href="#Map对象" class="headerlink" title="Map对象"></a>Map对象</h3><p>Map对象保存键值对，任何值都可以作为一个键或一个值<br><code>var a = new Map()</code></p><h2 id="ES6-对象新语法"><a href="#ES6-对象新语法" class="headerlink" title="ES6 对象新语法"></a>ES6 对象新语法</h2><h3 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h3><p>通过<code>new Object()</code>， <code>Object.create()</code>方法，或者使用<code>字面量标记</code>（初始化标记）初始化对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let obj = &#123;&#125;</span><br><span class="line">let obj2 = new Object&#123;&#125;</span><br><span class="line">let obj3 = Object.create(Object.prototype)</span><br><span class="line">let obj4 = Object.create(null)</span><br><span class="line"></span><br><span class="line">var o = &#123;</span><br><span class="line">  property([parameters]) &#123;&#125;,</span><br><span class="line">  get property() &#123;&#125;,</span><br><span class="line">  set property(value) &#123;&#125;,</span><br><span class="line">  * generator() &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var i = 0;</span><br><span class="line">var a = &#123;</span><br><span class="line">  [&quot;foo&quot; + ++i]: i,</span><br><span class="line">  [&quot;foo&quot; + ++i]: i,</span><br><span class="line">  [&quot;foo&quot; + ++i]: i</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(a.foo1); // 1</span><br><span class="line">console.log(a.foo2); // 2</span><br><span class="line">console.log(a.foo3); // 3</span><br><span class="line"></span><br><span class="line">var param = &apos;size&apos;;</span><br><span class="line">var config = &#123;</span><br><span class="line">  [param]: 12,</span><br><span class="line">  [&quot;mobile&quot; + param.charAt(0).toUpperCase() + param.slice(1)]: 4</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(config); // &#123; size: 12, mobileSize: 4 &#125;</span><br></pre></td></tr></table></figure><h2 id="ES6-模块"><a href="#ES6-模块" class="headerlink" title="ES6 模块"></a>ES6 模块</h2><p>导入: <code>import</code></p><blockquote><p>import defaultExport from “module-name”;<br>import <em> as name from “module-name”;<br>import { export } from “module-name”;<br>import { export as alias } from “module-name”;<br>import { export1 , export2 } from “module-name”;<br>import { foo , bar } from “module-name/path/to/specific/un-exported/file”;<br>import { export1 , export2 as alias2 , […] } from “module-name”;<br>import defaultExport, { export [ , […] ] } from “module-name”;<br>import defaultExport, </em> as name from “module-name”;<br>import “module-name”;</p></blockquote><p>导出: <code>export</code></p><blockquote><p>export { name1, name2, …, nameN };<br>export { variable1 as name1, variable2 as name2, …, nameN };<br>export default expression;<br>export { default } from …;</p></blockquote><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>类：实际上是个“特殊的函数”，<strong>拥有相同属性的对象</strong>类语法有两个组成部分：类表达式和类声明。<br>构造函数： <strong>用来创建某个类的对象的函数</strong><br><code>new</code><br><code>get</code><br><code>set</code><br><code>constructor</code>：指向对象的原型的属性<br><code>static</code>：关键字用来定义一个类的一个静态方法<br><code>extends</code>：关键字在类声明或类表达式中用于创建一个类作为另一个类的一个子类<br><code>super</code>： 关键字用于调用对象的父对象上的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Rectangle &#123;</span><br><span class="line">    // constructor </span><br><span class="line">    constructor(height, width) &#123;</span><br><span class="line">        this.height = height;</span><br><span class="line">        this.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">    // Getter</span><br><span class="line">    get area() &#123;</span><br><span class="line">        return this.calcArea()</span><br><span class="line">    &#125;</span><br><span class="line">    // Method</span><br><span class="line">    calcArea() &#123;</span><br><span class="line">        return this.height * this.width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const square = new Rectangle(10, 10);</span><br><span class="line"></span><br><span class="line">console.log(square.area);</span><br><span class="line">// 100</span><br></pre></td></tr></table></figure><h2 id="Promise回调"><a href="#Promise回调" class="headerlink" title="Promise回调"></a>Promise回调</h2><ol><li>回调</li></ol><ul><li>把一个函数A传给另一个函数B调用，那么A就是回调函数</li><li>缺点1：回调地狱</li><li>缺点2：不知道怎么使用 Node/jQuery —— 只能强行背下来</li></ul><ol start="2"><li>Promise</li></ol><p>对象用于表示一个异步操作的最终状态（完成或失败），以及该异步操作的结果值。<br>语法：<br><code>new Promise( function(resolve, reject) {...} /* executor */  );</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var promise1 = new Promise(function(resolve, reject) &#123;</span><br><span class="line">  setTimeout(function() &#123;</span><br><span class="line">    resolve(&apos;foo&apos;);</span><br><span class="line">  &#125;, 300);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise1.then(function(value) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">  // expected output: &quot;foo&quot;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(promise1);</span><br><span class="line">// expected output: [object Promise]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>HTTP高级</title>
      <link href="/2019/07/26/HTTP%E9%AB%98%E7%BA%A7/"/>
      <url>/2019/07/26/HTTP%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="Cookie-和-Session-的区别"><a href="#Cookie-和-Session-的区别" class="headerlink" title="Cookie 和 Session 的区别"></a>Cookie 和 Session 的区别</h2><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><ol><li>服务器通过<code>Set-Cookie</code> 头给客户端一串字符串</li><li>客户端每次访问相同域名的网页时，必须带上这串字符串</li><li>客户端要在一小段时间内保持这个Cookie</li><li>Cookie 默认在用户关闭页面后就失效，后台代码可以任意设置Cookie的过期时间</li></ol><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><ol><li>将<code>SessionID</code>（随机数）通过Cookie发给客户端</li><li>客户端访问服务器时，服务器读取<code>SessionID</code></li><li>服务器有一小块内存（哈希表）保存了所有的session</li><li>通过<code>SeesionID</code> 我们可以得到对应用户的隐私信息，如ID,Email</li><li>这个内存（哈希表）就是服务器上的所有session</li></ol><p>区别：<br><strong>Session是基于Cookie实现的，使用Session防止用户cookie被篡改</strong><br><strong>Cookie 保存在客户端，每次都随请求发送给 Server</strong><br><strong>Session 保存在 Server 的内存里，其 Session ID 是通过 Cookie 发送给客户端的</strong></p><h2 id="Cookie-和-LocalStorage-的区别"><a href="#Cookie-和-LocalStorage-的区别" class="headerlink" title="Cookie 和 LocalStorage 的区别"></a>Cookie 和 LocalStorage 的区别</h2><p>区别：<br><strong>Cookie</strong>是通过服务器使用HTTP协议进行cookie存储<br><strong>LocalStorage</strong> 跟 <strong>HTTP</strong> 无关，HTTP 不会带上 LocalStorage的值<br><strong>LocalStorage</strong> 的大小限制比 <strong>Cookie</strong> 大多了</p><h2 id="LocalStorage-和-SessionStorage-的区别"><a href="#LocalStorage-和-SessionStorage-的区别" class="headerlink" title="LocalStorage 和 SessionStorage 的区别"></a>LocalStorage 和 SessionStorage 的区别</h2><h3 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h3><ol><li>LocalStorage 跟 HTTP 无关</li><li>HTTP 不会带上 LocalStorage的值</li><li>只有相同域名的页面才能互相读取 LocalStorage （没有同源那么严格）</li><li>每个域名 LocalStorage 最大存储量为 5MB 左右 （每个浏览器不一样）</li><li>常用场景： 记录有没有提示过用户（主要是记录没有用的信息，不能记录密码）</li><li>LocalStorage 永久有效， 除非用户清理缓存</li></ol><h3 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h3><ol><li>LocalStorage 跟 HTTP 无关</li><li>HTTP 不会带上 LocalStorage的值</li><li>只有相同域名的页面才能互相读取 LocalStorage （没有同源那么严格）</li><li>每个域名 LocalStorage 最大存储量为 5MB 左右 （每个浏览器不一样）</li></ol><p>区别：<br><strong>LocalStorage 永久有效， 除非用户清理缓存</strong><br><strong>SessionStorage 在用户关闭页面（会话结束）后就失效</strong></p><h2 id="Cookie-如何设置过期时间？"><a href="#Cookie-如何设置过期时间？" class="headerlink" title="Cookie 如何设置过期时间？"></a>Cookie 如何设置过期时间？</h2><ul><li>通过max-age,将max-age设置为正数的时候,数值即为cookie的有效时间,设置为负数或零就可以将cookie删除.</li><li>通过expires来设置,但时间格式要用GMT或者UTC来表示</li></ul><h2 id="如何删除-Cookie？"><a href="#如何删除-Cookie？" class="headerlink" title="如何删除 Cookie？"></a>如何删除 Cookie？</h2><blockquote><ol><li>打开Chrome浏览器 。 …</li><li>点击Chrome浏览器右上角的⋮。 屏幕上会出现一个下拉菜单。</li><li>选择靠近菜单底部的更多工具。 …</li><li>点击靠近弹出菜单顶端的清除浏览数据，在新的标签页中打开浏览数据偏好设置。</li><li>一定要勾选“Cookie及其它网站数据”。 …</li><li>选择时间不限。 …</li><li>点击窗口右下角的清除数据，删除浏览器的所有Cookie。</li></ol></blockquote><h2 id="Cache-Control-max-age-1000-缓存-与-ETag-的「缓存」有什么区别？"><a href="#Cache-Control-max-age-1000-缓存-与-ETag-的「缓存」有什么区别？" class="headerlink" title="Cache-Control: max-age=1000 缓存 与 ETag 的「缓存」有什么区别？"></a>Cache-Control: max-age=1000 缓存 与 ETag 的「缓存」有什么区别？</h2><p>区别：<br><code>Cache-Control: max-age=1000</code>是设置缓存1000毫秒内不发请求，超出后才发出请求。<br><code>Etag</code>是不下载文件，但还是要发出请求。发出请求后，检查<code>if-None-Match</code>信息，通过对比浏览器缓存文件的md5与服务器对应文件的md5是否一致,来确定是否可以利用缓存,只要md5一致,那么不会有响应体,直接用缓存</p><p>推荐优先使用<code>Cache-Control</code></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>JS高级基础知识</title>
      <link href="/2019/07/25/JS%E9%AB%98%E7%BA%A7%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/07/25/JS%E9%AB%98%E7%BA%A7%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var object = &#123;&#125;</span><br><span class="line">object.__proto__ === Object.prototype // 为 true</span><br><span class="line"></span><br><span class="line">var fn = function() &#123;&#125;</span><br><span class="line">fn.__proto__ === Function.prototype // 为 true</span><br><span class="line">fn.__proto__.__proto__ === Object.prototype // 为 true</span><br><span class="line"></span><br><span class="line">var array = []</span><br><span class="line">array.__proto__ === Array.prototype // 为 true</span><br><span class="line">array.__proto__.__proto__ === Object.prototype // 为 true</span><br><span class="line"></span><br><span class="line">Function.__proto__ === Function.prototype // 为 true</span><br><span class="line">Array.__proto__ === Function.prototype // 为 true</span><br><span class="line">Object.__proto__ === Function.prototype // 为 true</span><br><span class="line"></span><br><span class="line">true.__proto__ === Boolean.prototype // 为 true</span><br><span class="line"></span><br><span class="line">Function.prototype.__proto__ === Object.prototype // 为 true</span><br></pre></td></tr></table></figure><h2 id="new-Fn-会执行-Fn，并打印出-this，请问这个-this-有哪些属性？这个-this-的原型有哪些属性？"><a href="#new-Fn-会执行-Fn，并打印出-this，请问这个-this-有哪些属性？这个-this-的原型有哪些属性？" class="headerlink" title="new Fn() 会执行 Fn，并打印出 this，请问这个 this 有哪些属性？这个 this 的原型有哪些属性？"></a>new Fn() 会执行 Fn，并打印出 this，请问这个 this 有哪些属性？这个 this 的原型有哪些属性？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function Fn() &#123;</span><br><span class="line">    console.log(this)</span><br><span class="line">&#125;</span><br><span class="line">new Fn()</span><br></pre></td></tr></table></figure><ol><li>this 自身没有属性（只有一个隐藏的 <code>__proto__</code> 属性）；分为<strong>自有属性</strong>和<strong>共有属性</strong>。</li><li>this 的原型是 fn.prototype，只有一个属性 <code>constructor</code> ，且 constructor === fn（另外还有一个隐藏属性 <code>__proto__</code> ，指向 <strong>Object.prototype</strong>）</li></ol><h2 id="JSON-和-JavaScript-是什么关系？区别有哪些"><a href="#JSON-和-JavaScript-是什么关系？区别有哪些" class="headerlink" title="JSON 和 JavaScript 是什么关系？区别有哪些?"></a>JSON 和 JavaScript 是什么关系？区别有哪些?</h2><ul><li>JSON 和 JavaScript 是没有关系。</li><li>JSON 是一门抄袭/借鉴 JavaScript 的语言，同时也是一种数据交互格式，JSON 是 JavaScript 的子集（或者说 JSON 只抄袭了一部分 JavaScript 语法，而且没有新增任何原创的语法）</li></ul><p>区别： </p><ul><li>JSON是一种轻量级的数据交换格式。语法上严格遵守使用双引号 <code>&quot;</code> ，是一个字符串。 <strong>不支持</strong>函数、undefined、变量、引用、单引号字符串、对象的key不支持单引号也不支持不加引号、没有内置的 Date、Math、RegExp 等。</li><li>JavaScript是轻量级的脚本语言。并且JavaScript 全都支持。</li></ul><h2 id="MVC-是什么？"><a href="#MVC-是什么？" class="headerlink" title="MVC 是什么？"></a>MVC 是什么？</h2><p>MVC 是一种设计模式（或者软件架构），把系统分为三层：<strong>Model数据、View视图和Controller控制器</strong>。<br>Model 数据管理，包括数据逻辑、数据请求、数据存储等功能。前端 Model 主要负责 AJAX 请求或者 LocalStorage 存储<br>View 负责用户界面，前端 View 主要负责 HTML 渲染。<br>Controller 负责处理 View 的事件，并更新 Model；也负责监听 Model 的变化，并更新 View，Controller 控制其他的所有流程。</p><ul><li>控制器（Controller）- 负责转发请求，对请求进行处理。</li><li>视图（View） - 界面设计人员进行图形界面设计。</li><li>模型（Model） - 操作数据。程序员编写程序应有的功能（实现算法等等）、数据库专家进行数据管理和数据库设计(可以实现具体的功能)。</li></ul><p>Model 和服务器交互，Model 将得到的数据交给 Controller，Controller 把数据填入 View，并监听 View<br>用户操作 View，如点击按钮，Controller 就会接受到点击事件，Controller 这时会去调用 Model，Model 会与服务器交互，得到数据后返回给 Controller，Controller 得到数据就去更新 View</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">!function() &#123;</span><br><span class="line">  var model = &#123;</span><br><span class="line">      data: null,</span><br><span class="line">      init() &#123;&#125;</span><br><span class="line">      fetch() &#123;&#125;</span><br><span class="line">      save() &#123;&#125;</span><br><span class="line">      update() &#123;&#125;</span><br><span class="line">      delete() &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  view = &#123;</span><br><span class="line">      init() &#123;&#125;</span><br><span class="line">      template: &apos;&lt;h1&gt;hi&lt;/h1&apos; &gt;</span><br><span class="line">  &#125;</span><br><span class="line">  controller = &#123;</span><br><span class="line">      view: null,</span><br><span class="line">      model: null,</span><br><span class="line">      init(view, model) &#123;</span><br><span class="line">          this.view = view</span><br><span class="line">          this.model = model</span><br><span class="line">          this.bindEvents()</span><br><span class="line">      &#125;</span><br><span class="line">      render() &#123;</span><br><span class="line">          this.view.querySelector(&apos;name&apos;).innerText = this.model.data.name</span><br><span class="line">      &#125;,</span><br><span class="line">      bindEvents() &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  controller.init(view, model)</span><br><span class="line">&#125;.call()</span><br></pre></td></tr></table></figure><h2 id="在-ES5-中如何用函数模拟一个类"><a href="#在-ES5-中如何用函数模拟一个类" class="headerlink" title="在 ES5 中如何用函数模拟一个类"></a>在 ES5 中如何用函数模拟一个类</h2><p>ES 5 没有 class 关键字，所以只能使用函数来模拟类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function Person(name, age) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.age = age</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.gender = function()&#123;&#125;</span><br><span class="line"></span><br><span class="line">var person = new Person(&apos;cai&apos;, &apos;16&apos;)</span><br></pre></td></tr></table></figure><p>上面代码就是一个最简单的类，Person 构造函数创建出来的对象自身有 name,age 属性，其原型上面有一个 gender 属性。</p><h2 id="创建一个返回-Promise-对象的函数"><a href="#创建一个返回-Promise-对象的函数" class="headerlink" title="创建一个返回 Promise 对象的函数"></a>创建一个返回 Promise 对象的函数</h2><p>利用JQuery使用<strong>AJAX异步调用函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$.ajax(&#123;url:&apos;/xxx&apos;, method:&apos;get&apos;&#125;).then(success1, error1).then(success2, error2)</span><br></pre></td></tr></table></figure><p>创建 Promise 对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function asyncMethod()&#123;</span><br><span class="line">    return new Promise(function (resolve, reject)&#123;</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            成功则调用 resolve</span><br><span class="line">            失败则调用 reject</span><br><span class="line">        &#125;,3000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>JSONP_跨域_AJAX</title>
      <link href="/2019/07/19/JSONP_%E8%B7%A8%E5%9F%9F_AJAX/"/>
      <url>/2019/07/19/JSONP_%E8%B7%A8%E5%9F%9F_AJAX/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是同源策略"><a href="#什么是同源策略" class="headerlink" title="什么是同源策略"></a>什么是同源策略</h2><p>同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的关键的安全机制。<br><strong>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。</strong><br>所谓”同源”指的是”三个相同”。</p><ul><li>协议相同</li><li>域名相同</li><li>端口相同</li></ul><h2 id="跨域有几种实现形式"><a href="#跨域有几种实现形式" class="headerlink" title="跨域有几种实现形式"></a>跨域有几种实现形式</h2><p>跨域有4种实现形式。</p><ol><li>jsonp</li><li>CORS</li><li>降域</li><li>postMessage</li></ol><h2 id="什么是-JSONP？"><a href="#什么是-JSONP？" class="headerlink" title="什么是 JSONP？"></a>什么是 JSONP？</h2><p>jsonp是便于客户端使用数据，逐渐形成了一种非正式传输协议。jsonp的核心则是动态添加<code>&lt;script&gt;</code>标签来调用服务器提供的js脚本。</p><h2 id="JSONP-为什么不支持-POST"><a href="#JSONP-为什么不支持-POST" class="headerlink" title="JSONP 为什么不支持 POST"></a>JSONP 为什么不支持 POST</h2><ol><li>因为JSONP是通过动态<code>&lt;script&gt;</code>创建的。</li><li>使用动态<code>&lt;script&gt;</code>后只能使用GET请求，不能使用POST请求。</li></ol><h2 id="什么是CORS"><a href="#什么是CORS" class="headerlink" title="什么是CORS"></a>什么是CORS</h2><p>CORS 全称是<strong>跨域资源共享</strong>（<code>Cross-Origin Resource Sharing</code>），是一种 <em>AJAX</em> 跨域请求资源的方式，当你使用 <strong>XMLHttpRequest</strong> 发送请求时，浏览器发现该请求不符合同源策略，会给该请求加一个请求头：Origin，后台进行一系列处理，如果确定接受请求则在返回结果中加入一个响应头：<code>Access-Control-Allow-Origin</code>; 浏览器判断该相应头中是否包含 Origin 的值.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//  AJAX请求</span><br><span class="line">let request = new XMLHttpRequest()</span><br><span class="line">  request.open(&apos;GET&apos;, &apos;/xxx&apos;)</span><br><span class="line">  request.send()</span><br><span class="line">  request.onreadystatechange(() =&gt; &#123;</span><br><span class="line">    if (request.readyState === 4) &#123;</span><br><span class="line">      if (request.status &gt;= 200 &amp;&amp; request.status &lt; 300) &#123;</span><br><span class="line">        let string = request.responseText</span><br><span class="line">        let object = JSON.parse(string)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else if(request.status &gt;= 400) &#123;</span><br><span class="line">      console.log(&apos;请求失败&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="AJAX-的所有功能"><a href="#AJAX-的所有功能" class="headerlink" title="AJAX 的所有功能"></a>AJAX 的所有功能</h2><ul><li>客户端的JS发起请求（浏览器上的）</li><li>服务端的JS发送响应（Node.js上的）</li></ul><ol><li><p>JS 可以设置任意请求 header 吗<br>第一部分 request.open(‘get’, ‘/xxx’)<br>第二部分 request.setRequestHeader(‘content-type’,’x-www-form-urlencoded’)<br>第四部分 request.send(‘a=1&amp;b=2’)</p></li><li><p>JS 可以获取任意响应 header 吗？<br>第一部分 request.status / request.statusText<br>第二部分 request.getResponseHeader() / request.getAllResponseHeaders()<br>第四部分 request.responseText</p></li></ol><h2 id="使用JQuery的异步请求"><a href="#使用JQuery的异步请求" class="headerlink" title="使用JQuery的异步请求"></a>使用JQuery的异步请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">JQuery.ajax(&#123;url, method, body, success, fail&#125;) &#123;</span><br><span class="line">    let request = new XMLHttpRequest()</span><br><span class="line">    request.open(method, url)</span><br><span class="line">    request.onreadystatechange = () =&gt; &#123;</span><br><span class="line">        if (request.readyState === 4) &#123;</span><br><span class="line">            if(request.status &gt;= 200 &amp;&amp; request.status &lt; 300) &#123;</span><br><span class="line">                success.call(undefined, request.responseText)</span><br><span class="line">            &#125; else if (request.status &gt; 400) &#123;</span><br><span class="line">                fail.call(undefined, request)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    request.send(body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Promise规则封装-jQuery-ajax"><a href="#使用Promise规则封装-jQuery-ajax" class="headerlink" title="使用Promise规则封装 jQuery.ajax"></a>使用Promise规则封装 jQuery.ajax</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">jQuery.ajax = function(&#123;url, method&#125;) &#123;</span><br><span class="line">  return new Promise(function(resolve, reject) &#123;</span><br><span class="line">    let request = new XMLHttpRequest()</span><br><span class="line">    request.open(method, url)</span><br><span class="line">    request.onreadystatechange = () =&gt; &#123;</span><br><span class="line">      if (request.readyState === 4) &#123;</span><br><span class="line">          if(request.status &gt;= 200 &amp;&amp; request.status &lt; 300) &#123;</span><br><span class="line">              resolve.call(undefined, request.responseText)</span><br><span class="line">          &#125; else if (request.status &gt; 400) &#123;</span><br><span class="line">              reject.call(undefined, request)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    request.send()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>面试题</title>
      <link href="/2019/07/15/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/07/15/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="请写出一个符合-W3C-规范的-HTML-文件，要求"><a href="#请写出一个符合-W3C-规范的-HTML-文件，要求" class="headerlink" title="请写出一个符合 W3C 规范的 HTML 文件，要求"></a>请写出一个符合 W3C 规范的 HTML 文件，要求</h2><ol><li>页面标题为「我的页面」</li><li>页面中引入了一个外部 CSS 文件，文件路径为 /style.css</li><li>页面中引入了另一个外部 CSS 文件，路径为 /print.css，该文件仅在打印时生效</li><li>页面中引入了另一个外部 CSS 文件，路径为 /mobile.css，该文件仅在设备宽度小于 500 像素时生效</li><li>页面中引入了一个外部 JS 文件，路径为 /main.js</li><li>页面中引入了一个外部 JS 文件，路径为 /gbk.js，文件编码为 GBK</li><li>页面中有一个 SVG 标签，SVG 里面有一个直径为 100 像素的圆圈，颜色随意</li><li>注意题目中的路径</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;我的页面&lt;/title&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;./style.css&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;./print.css&quot; media=&quot;print&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;./mobile.css&quot; media=&quot;screen and (max-width:500px)&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;svg width=&quot;200px&quot; height=&quot;200px&quot;&gt;</span><br><span class="line">      &lt;circle cx=&quot;50&quot; cy=&quot;50&quot; r=&quot;50&quot; fill=&quot;yellow&quot;/&gt;</span><br><span class="line">  &lt;/svg&gt;</span><br><span class="line">&lt;script src=&quot;./main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./gbk.js&quot; charset=&quot;GBK&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="移动端是怎么做适配的？"><a href="#移动端是怎么做适配的？" class="headerlink" title="移动端是怎么做适配的？"></a>移动端是怎么做适配的？</h2><ol><li>meta viewport</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>媒体查询</li></ol><p>如果满足媒体查询中的条件，设置生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@media (min-width: 960px) &#123;</span><br><span class="line"></span><br><span class="line">​    body &#123;</span><br><span class="line"></span><br><span class="line">​        background: red</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">// 如果媒体查询满足不小于960px的条件，则body背景色变红色</span><br></pre></td></tr></table></figure></p><ol start="3"><li>动态 rem 方案</li></ol><p>移动端自适应rem</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">        var scale = 1 / window.devicePixelRatio;</span><br><span class="line"></span><br><span class="line">        document.write(`&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=$&#123;scale&#125;, maximum-scale=$&#123;scale&#125;, minimum-scale=$&#123;scale&#125;&quot;&gt;`)</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        var width = document.documentElement.clientWidth / window.devicePixelRatio;</span><br><span class="line"></span><br><span class="line">        var css = `</span><br><span class="line"></span><br><span class="line">            html&#123;</span><br><span class="line"></span><br><span class="line">                font-size: $&#123;width / 10 * window.devicePixelRatio&#125;px;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        `</span><br><span class="line"></span><br><span class="line">        document.write(`&lt;style&gt;$&#123;css&#125;&lt;/style&gt;`)</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p><a href="https://bloglive.top/demo/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94rem/index.html" target="_blank" rel="noopener">移动端rem</a></p><h2 id="实现圆角矩形和阴影怎么做"><a href="#实现圆角矩形和阴影怎么做" class="headerlink" title="实现圆角矩形和阴影怎么做?"></a>实现圆角矩形和阴影怎么做?</h2><ol><li>圆角矩形(<strong>border-radius</strong>)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">border-radius: 25px</span><br></pre></td></tr></table></figure><p>2, 阴影(<strong>box-shadow</strong>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">box-shadow: 3px 4px 5px 0px rgba(0,0,0,0.75);</span><br></pre></td></tr></table></figure><p><a href="http://js.jirengu.com/qetecesiyi/2/edit" target="_blank" rel="noopener">demo</a></p><h2 id="什么是闭包，闭包的用途是什么？"><a href="#什么是闭包，闭包的用途是什么？" class="headerlink" title="什么是闭包，闭包的用途是什么？"></a>什么是闭包，闭包的用途是什么？</h2><p><strong>函数和函数内部能够访问外部变量的环境，就是闭包。</strong><br>闭包的用途：</p><pre><code>1. 隐藏一个变量。2. 函数作用域下，保护内部变量不受外部影响的机制。</code></pre><h2 id="call、apply、bind-的用法分别是什么？"><a href="#call、apply、bind-的用法分别是什么？" class="headerlink" title="call、apply、bind 的用法分别是什么？"></a>call、apply、bind 的用法分别是什么？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fun.call(thisArg, arg1, arg2, ...)</span><br><span class="line">func.apply(thisArg, [argsArray])</span><br><span class="line">function.bind(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//Demo with javascript .call()</span><br><span class="line"></span><br><span class="line">var obj = &#123;name:&quot;Niladri&quot;&#125;;</span><br><span class="line"></span><br><span class="line">var greeting = function(a,b,c)&#123;</span><br><span class="line">    return &quot;welcome &quot;+this.name+&quot; to &quot;+a+&quot; &quot;+b+&quot; in &quot;+c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(greeting.call(obj,&quot;Newtown&quot;,&quot;KOLKATA&quot;,&quot;WB&quot;));</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//Demo with javascript .apply()</span><br><span class="line"></span><br><span class="line">var obj = &#123;name:&quot;Niladri&quot;&#125;;</span><br><span class="line"></span><br><span class="line">var greeting = function(a,b,c)&#123;</span><br><span class="line">    return &quot;welcome &quot;+this.name+&quot; to &quot;+a+&quot; &quot;+b+&quot; in &quot;+c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// array of arguments to the actual function</span><br><span class="line">var args = [&quot;Newtown&quot;,&quot;KOLKATA&quot;,&quot;WB&quot;];  </span><br><span class="line">console.log(&quot;Output using .apply() below &quot;)</span><br><span class="line">console.log(greeting.apply(obj,args));</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//Use .bind() javascript</span><br><span class="line"></span><br><span class="line">var obj = &#123;name:&quot;Niladri&quot;&#125;;</span><br><span class="line"></span><br><span class="line">var greeting = function(a,b,c)&#123;</span><br><span class="line">    return &quot;welcome &quot;+this.name+&quot; to &quot;+a+&quot; &quot;+b+&quot; in &quot;+c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//creates a bound function that has same body and parameters </span><br><span class="line">var bound = greeting.bind(obj); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.dir(bound); ///returns a function</span><br><span class="line"></span><br><span class="line">console.log(&quot;Output using .bind() below &quot;);</span><br><span class="line"></span><br><span class="line">console.log(bound(&quot;Newtown&quot;,&quot;KOLKATA&quot;,&quot;WB&quot;)); //call the bound function</span><br></pre></td></tr></table></figure><h2 id="请说出至少-8-个-HTTP-状态码，并描述各状态码的意义。"><a href="#请说出至少-8-个-HTTP-状态码，并描述各状态码的意义。" class="headerlink" title="请说出至少 8 个 HTTP 状态码，并描述各状态码的意义。"></a>请说出至少 8 个 HTTP 状态码，并描述各状态码的意义。</h2><h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><ol><li>1xx消息<br>代表请求已被接受，需要继续处理</li><li>2xx成功<br>代表请求已成功被服务器接收、理解、并接受</li><li>3xx重定向<br>代表需要客户端采取进一步的操作才能完成请求</li><li>4xx客户端错误<br>代表了客户端看起来可能发生了错误，妨碍了服务器的处理</li><li>5xx服务器错误<br>表示服务器无法完成明显有效的请求</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">200---(成功) 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。</span><br><span class="line">201---(已创建) 请求成功并且服务器创建了新的资源。</span><br><span class="line">301---(永久移动)请求的网页已永久移动到新位置.服务器返回此响应(对 GET 或 HEAD 请求的响应)时,会自动将请求者转到新位置</span><br><span class="line">304---(未修改)自从上次请求后,请求的网页未修改过.服务器返回此响应时,不会返回网页内容</span><br><span class="line">403---(禁止)服务器拒绝请求</span><br><span class="line">404---(未找到)服务器找不到请求的网页</span><br><span class="line">500---(服务器内部错误)服务器遇到错误,无法完成请求</span><br><span class="line">503---(服务不可用)服务器目前无法使用(由于超载或停机维护)</span><br></pre></td></tr></table></figure><h2 id="请写出一个-HTTP-post-请求的内容，包括四部分。其中"><a href="#请写出一个-HTTP-post-请求的内容，包括四部分。其中" class="headerlink" title="请写出一个 HTTP post 请求的内容，包括四部分。其中"></a>请写出一个 HTTP post 请求的内容，包括四部分。其中</h2><ol><li>第四部分的内容是 username=ff&amp;password=123</li><li>第二部分必须含有 Content-Type 字段</li><li>请求的路径为 /path</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1 POST /path  HTTP/1.1</span><br><span class="line">2 key: value</span><br><span class="line">2 key: value</span><br><span class="line">2 Content-Type: application/x-www-form-urlencoded</span><br><span class="line">3</span><br><span class="line">4 username=ff&amp;password=123</span><br></pre></td></tr></table></figure><h2 id="请说出至少三种排序的思路，这三种排序的时间复杂度分别为"><a href="#请说出至少三种排序的思路，这三种排序的时间复杂度分别为" class="headerlink" title="请说出至少三种排序的思路，这三种排序的时间复杂度分别为"></a>请说出至少三种排序的思路，这三种排序的时间复杂度分别为</h2><ol><li>O(n*n)</li><li>O(n log2 n)</li><li>O(n + max) </li></ol><h3 id="O-n-n-冒泡排序"><a href="#O-n-n-冒泡排序" class="headerlink" title="O(n*n) 冒泡排序"></a>O(n*n) 冒泡排序</h3><p>冒泡排序，重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function bubbleSort(arr) &#123;</span><br><span class="line">    var len = arr.length;</span><br><span class="line">    for (var i = 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">        for (var j = 0; j &lt; len - 1 - i; j++) &#123;</span><br><span class="line">            if (arr[j] &gt; arr[j+1]) &#123;        // 相邻元素两两对比</span><br><span class="line">                var temp = arr[j+1];        // 元素交换</span><br><span class="line">                arr[j+1] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="O-n-log2-n-快速排序"><a href="#O-n-log2-n-快速排序" class="headerlink" title="O(n log2 n)快速排序"></a>O(n log2 n)快速排序</h3><p>快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为较小和较大的2个子序列，然后递归地排序两个子序列。</p><p>步骤为：</p><ol><li>挑选基准值：从数列中挑出一个元素，称为“基准”（pivot），</li><li>分割：重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（与基准值相等的数可以到任何一边）。在这个分割结束之后，对基准值的排序就已经完成，</li><li>递归排序子序列：递归地将小于基准值元素的子序列和大于基准值元素的子序列排序。</li></ol><h3 id="O-n-max-基数排序"><a href="#O-n-max-基数排序" class="headerlink" title="O(n + max) 基数排序"></a>O(n + max) 基数排序</h3><p>是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。</p><h2 id="一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？"><a href="#一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？" class="headerlink" title="一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？"></a>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</h2><ol><li>DNS解析</li></ol><p>一开始输入URL地址，如<code>www.baidu.com</code>，浏览器可能会进行一些预处理。浏览器回对URL进行检查，首先判断协议、判断URL的安全性… 最后进行DNS解析。</p><blockquote><p>浏览器缓存 – 浏览器会缓存DNS记录一段时间<br>系统缓存 – 从hosts文件里查找是否有该域名和对应IP<br>路由器缓存 – 一般路由器也会缓存域名信息<br>ISP DNS 缓存 – 比如到电信的DNS上查找缓存<br>如果都没有找到，则向根域名服务器查找域名对应IP，根域名服务器把请求转发到下一级，直到找到IP</p></blockquote><ol start="2"><li>TCP链接</li></ol><p><strong>然后建立TCP连接 – 三次握手</strong></p><ul><li>主机向服务器发送一个建立连接的请求（您好，我想认识您）</li><li>服务器接到请求后发送同意连接的信号（好的，很高兴认识您）</li><li>主机接到同意连接的信号后，再次向服务器发送了确认信号（我也很高兴认识您），自此，主机与服务器两者建立了连接</li></ul><ol start="3"><li>发送HTTP请求</li></ol><ul><li>浏览器根据 URL 内容生成 HTTP 请求，请求中包含请求文件的位置、请求文件的方式等等</li><li>服务器接到请求后，会根据 HTTP 请求中的内容来决定如何获取相应的 HTML 文件</li><li>服务器将得到的 HTML 文件发送给浏览器</li><li>在浏览器还没有完全接收 HTML 文件时便开始渲染、显示网页</li><li>在执行 HTML 中代码时，根据需要，浏览器会继续请求图片、CSS、JavsScript等文件，过程同请求 HTML</li></ul><ol start="4"><li>服务器处理请求并返回HTTP报文</li></ol><p>服务器的端口接收到请求报文，开始分析处理报文，查询服务器内是否存在符合请求要求的路径以及文件，返回响应报文；如果不存在此路径或者文件，则返回响应报文，状态码404等消息；如果有，则发送响应报文，包括HTTP协议、状态码200、响应报头、响应内容等；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 响应成功</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Bdpagetype: 2</span><br><span class="line">Bdqid: 0x8bf910690013ab7d</span><br><span class="line">Cache-Control: private</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Type: text/html;charset=utf-8</span><br><span class="line">Date: Mon, 15 Jul 2019 14:51:28 GMT</span><br><span class="line">Expires: Mon, 15 Jul 2019 14:51:27 GMT</span><br><span class="line">Server: BWS/1.1</span><br><span class="line">Set-Cookie: BDSVRTM=227; path=/</span><br><span class="line">Set-Cookie: BD_HOME=1; path=/</span><br><span class="line">Set-Cookie: H_PS_PSSID=1458_21103_20698_29522_29519_29237_28518_29098_28838_29220; path=/; domain=.baidu.com</span><br><span class="line">Strict-Transport-Security: max-age=172800</span><br><span class="line">X-Ua-Compatible: IE=Edge,chrome=1</span><br><span class="line">Transfer-Encoding: chunked</span><br></pre></td></tr></table></figure><ol start="5"><li>浏览器解析并渲染页面</li></ol><blockquote><p>解析 HTML 标签, 构建 DOM 树<br>解析 CSS 标签, 构建 CSSOM 树<br>把 DOM 和 CSSOM 组合成 渲染树 (render tree)<br>在渲染树的基础上进行布局(layout), 计算每个节点的几何结构<br>把每个节点绘制到屏幕上 (painting)</p></blockquote><ol start="6"><li>连接结束</li></ol><h2 id="实现数组去重？"><a href="#实现数组去重？" class="headerlink" title="实现数组去重？"></a>实现数组去重？</h2><ol><li>相邻元素去重(ES5)<br>这种方法首先调用了数组的排序方法sort()，然后根据排序后的结果进行遍历及相邻元素比对，如果相等则跳过改元素，直到遍历结束</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var array = [1,5,2,3,4,2,3,1,3,4]</span><br><span class="line"></span><br><span class="line">function unique(array) &#123;</span><br><span class="line">  if(!Array.isArray(array)) &#123;</span><br><span class="line">    console.log(&apos;type error!&apos;)</span><br><span class="line">    return </span><br><span class="line">  &#125;</span><br><span class="line">  array = array.sort()</span><br><span class="line">  let res = []</span><br><span class="line">  for(let i = 0; i &lt; array.length; i++) &#123;</span><br><span class="line">    if(array[i] !== array[i - 1]) &#123;</span><br><span class="line">      res.push(array[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unique(array)</span><br></pre></td></tr></table></figure><ol start="2"><li>set与解构赋值去重(ES6)<br>ES6中新增了数据类型set，set的一个最大的特点就是数据不重复。Set函数可以接受一个数组（或类数组对象）作为参数来初始化，利用该特性也能做到给数组去重</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var array = [1,5,2,3,4,2,3,1,3,4]</span><br><span class="line"></span><br><span class="line">function unique(array) &#123;</span><br><span class="line">  if(!Array.isArray(array)) &#123;</span><br><span class="line">    console.log(&apos;type error!&apos;)</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  return [...new Set(array)].sort()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unique(array)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>JS操作DOM常用API</title>
      <link href="/2019/07/07/JS%E6%93%8D%E4%BD%9CDOM%E5%B8%B8%E7%94%A8API/"/>
      <url>/2019/07/07/JS%E6%93%8D%E4%BD%9CDOM%E5%B8%B8%E7%94%A8API/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="Node类型"><a href="#Node类型" class="headerlink" title="Node类型"></a>Node类型</h3><p>Node类型中，我们最常用的就是element，text，attribute，comment，document，document_fragment这几种类型。</p><h3 id="Element类型"><a href="#Element类型" class="headerlink" title="Element类型"></a>Element类型</h3><p>Element提供了对元素标签名，子节点和特性的访问，我们常用HTML元素比如div，span，a等标签就是element中的一种。</p><p><strong>特性：</strong><br>(1) <code>nodeType为1</code><br>(2) <code>nodeName为元素标签名，tagName也是返回标签名</code><br>(3) <code>nodeValue为null</code><br>(4) <code>parentNode可能是Document或Element</code><br>(5) <code>子节点可能是Element，Text，Comment，Processing_Instruction，CDATASection或EntityReference</code></p><h3 id="Text类型"><a href="#Text类型" class="headerlink" title="Text类型"></a>Text类型</h3><p>Text表示文本节点，它包含的是纯文本内容，不能包含html代码，但可以包含转义后的html代码。<br><strong>特性：</strong></p><p>(1) <code>nodeType为3</code><br>(2) <code>nodeName为#text</code><br>(3) <code>nodeValue为文本内容</code><br>(4) <code>parentNode是一个Element</code><br>(5) <code>没有子节点</code></p><h3 id="Attr类型"><a href="#Attr类型" class="headerlink" title="Attr类型"></a>Attr类型</h3><p>Attr类型表示元素的特性，相当于元素的attributes属性中的节点。<br><strong>特性：</strong><br>(1) <code>nodeType值为2</code><br>(2) <code>nodeName是特性的名称</code><br>(3) <code>nodeValue是特性的值</code><br>(4) <code>parentNode为null</code></p><h3 id="Comment类型"><a href="#Comment类型" class="headerlink" title="Comment类型"></a>Comment类型</h3><p>Comment表示HTML文档中的注释。<br><strong>特性：</strong><br>(1) <code>nodeType为8</code><br>(2) <code>nodeName为#comment</code><br>(3) <code>nodeValue为注释的内容</code><br>(4) <code>parentNode可能是Document或Element</code><br>(5) <code>没有子节点</code></p><h3 id="Document类型"><a href="#Document类型" class="headerlink" title="Document类型"></a>Document类型</h3><p>Document表示文档，在浏览器中，document对象是HTMLDocument的一个实例，表示整个页面，它同时也是window对象的一个属性。<br><strong>特性：</strong><br>(1) <code>nodeType为9</code><br>(2) <code>nodeName为#document</code><br>(3) <code>nodeValue为null</code><br>(4) <code>parentNode为null</code><br>(5) <code>子节点可能是一个DocumentType或Element</code></p><h3 id="DocumentFragment类型"><a href="#DocumentFragment类型" class="headerlink" title="DocumentFragment类型"></a>DocumentFragment类型</h3><p>DocumentFragment是所有节点中唯一一个没有对应标记的类型，它表示一种轻量级的文档，可能当作一个临时的仓库用来保存可能会添加到文档中的节点。</p><p><strong>特性：</strong><br>(1) <code>nodeType为11</code><br>(2) <code>nodeName为#document-fragment</code><br>(3) <code>nodeValue为null</code><br>(4) <code>parentNode为null</code></p><h2 id="节点创建型api"><a href="#节点创建型api" class="headerlink" title="节点创建型api"></a>节点创建型api</h2><h3 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h3><p>通过传入指定的一个标签名来创建一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var div = document.createElement(&quot;div&quot;);</span><br></pre></td></tr></table></figure><h3 id="createTextNode"><a href="#createTextNode" class="headerlink" title="createTextNode"></a>createTextNode</h3><p>创建一个文本节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var textNode = document.createTextNode(&quot;一个TextNode&quot;);</span><br></pre></td></tr></table></figure><h3 id="cloneNode"><a href="#cloneNode" class="headerlink" title="cloneNode"></a>cloneNode</h3><p>返回调用方法的节点的一个副本，它接收一个bool参数，用来表示是否复制子元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var parent = document.getElementById(&quot;parentElement&quot;);</span><br><span class="line">var parent2 = parent.cloneNode(true);// 传入true</span><br><span class="line">parent2.id = &quot;parent2&quot;;</span><br></pre></td></tr></table></figure><h3 id="createDocumentFragment"><a href="#createDocumentFragment" class="headerlink" title="createDocumentFragment"></a>createDocumentFragment</h3><p>用来创建一个DocumentFragment</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var fragment = document.createDocumentFragment();</span><br></pre></td></tr></table></figure><h3 id="创建型API总结"><a href="#创建型API总结" class="headerlink" title="创建型API总结"></a>创建型API总结</h3><ol><li><p>它们创建的节点只是一个孤立的节点，要通过<code>appendChild</code>添加到文档中</p></li><li><p>cloneNode要注意如果被复制的节点是否包含子节点以及事件绑定等问题</p></li><li><p>使用createDocumentFragment来解决添加大量节点时的性能问题</p></li></ol><h2 id="页面修改型API"><a href="#页面修改型API" class="headerlink" title="页面修改型API"></a>页面修改型API</h2><p>修改页面内容的api主要包括：<strong>appendChild，insertBefore，removeChild，replaceChild</strong>。</p><h3 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild"></a>appendChild</h3><p>child节点将会作为parent节点的最后一个子节点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">parent.appendChild(child);</span><br></pre></td></tr></table></figure><h3 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore"></a>insertBefore</h3><p>insertBefore用来添加一个节点到一个参照节点之前</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">parentNode.insertBefore(newNode,refNode);</span><br></pre></td></tr></table></figure><h3 id="removeChild"><a href="#removeChild" class="headerlink" title="removeChild"></a>removeChild</h3><p>删除指定的子节点并返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var deletedChild = parent.removeChild(node);</span><br></pre></td></tr></table></figure><h3 id="replaceChild"><a href="#replaceChild" class="headerlink" title="replaceChild"></a>replaceChild</h3><p>replaceChild用于使用一个节点替换另一个节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">parent.replaceChild(newChild,oldChild);</span><br></pre></td></tr></table></figure><h2 id="页面修改型API总结"><a href="#页面修改型API总结" class="headerlink" title="页面修改型API总结"></a>页面修改型API总结</h2><ol><li><p>不管是新增还是替换节点，如果新增或替换的节点是原本存在页面上的，则其原来位置的节点将被移除，也就是说同一个节点不能存在于页面的多个位置</p></li><li><p>节点本身绑定的事件会不会消失，会一直保留着。</p></li></ol><h2 id="节点查询型API"><a href="#节点查询型API" class="headerlink" title="节点查询型API"></a>节点查询型API</h2><h3 id="document-getElementById"><a href="#document-getElementById" class="headerlink" title="document.getElementById"></a>document.getElementById</h3><p>根据元素id返回元素，返回值是Element类型，如果不存在该元素，则返回null。<br><strong>注意：</strong></p><ol><li><p>元素的Id是大小写敏感的，一定要写对元素的id</p></li><li><p>HTML文档中可能存在多个id相同的元素，则返回第一个元素</p></li><li><p>只从文档中进行搜索元素，如果创建了一个元素并指定id，但并没有添加到文档中，则这个元素是不会被查找到的</p></li></ol><h3 id="document-getElementsByTagName"><a href="#document-getElementsByTagName" class="headerlink" title="document.getElementsByTagName"></a>document.getElementsByTagName</h3><p>根据元素标签名获取元素，返回一个即时的HTMLCollection类型<br><strong>注意：</strong></p><ol><li><p>如果要对HTMLCollection集合进行循环操作，最好将其长度缓存起来，因为每次循环都会去计算长度，暂时缓存起来可以提高效率</p></li><li><p>如果没有存在指定的标签，该接口返回的不是null，而是一个空的HTMLCollection</p></li><li><p>“*”表示所有标签</p></li></ol><h3 id="document-getElementsByName"><a href="#document-getElementsByName" class="headerlink" title="document.getElementsByName"></a>document.getElementsByName</h3><p>主要是通过指定的name属性来获取元素，它返回一个即时的NodeList对象。<br><strong>注意：</strong></p><ol><li><p>返回对象是一个即时的NodeList，它是随时变化的</p></li><li><p>在HTML元素中，并不是所有元素都有name属性，比如div是没有name属性的，但是如果强制设置div的name属性，它也是可以被查找到的</p></li><li><p>在IE中，如果id设置成某个值，然后传入getElementsByName的参数值和id值一样，则这个元素是会被找到的，所以最好不好设置同样的值给id和name</p></li></ol><h3 id="document-getElementsByClassName"><a href="#document-getElementsByClassName" class="headerlink" title="document.getElementsByClassName"></a>document.getElementsByClassName</h3><p>这个API是根据元素的class返回一个即时的HTMLCollection<br><code>var elements = document.getElementsByClassName(names);</code><br><strong>注意：</strong></p><ol><li><p>返回结果是一个即时的HTMLCollection，会随时根据文档结构变化</p></li><li><p>IE9以下浏览器不支持</p></li><li><p>如果要获取2个以上classname，可传入多个classname，每个用空格相隔</p></li></ol><h3 id="document-querySelector和document-querySelectorAll"><a href="#document-querySelector和document-querySelectorAll" class="headerlink" title="document.querySelector和document.querySelectorAll"></a>document.querySelector和document.querySelectorAll</h3><p>这两个api很相似，通过css选择器来查找元素，注意选择器要符合CSS选择器的规则。<br><code>document.querySelector</code>返回<strong>第一个匹配的元素</strong>，如果没有匹配的元素，则返回null。<br><code>document.querySelectorAll</code>的不同之处在于它返回的是<strong>所有匹配的元素</strong>，而且可以匹配多个选择符<br><strong>注意：</strong></p><ol><li><p>querySelectorAll也是通过深度优先搜索，搜索的元素顺序和选择器的顺序无关</p></li><li><p>返回的是一个非即时的NodeList，也就是说结果不会随着文档树的变化而变化</p></li></ol><h2 id="节点关系型api"><a href="#节点关系型api" class="headerlink" title="节点关系型api"></a>节点关系型api</h2><h3 id="父关系型api"><a href="#父关系型api" class="headerlink" title="父关系型api"></a>父关系型api</h3><p><code>parentNode</code>：每个节点都有一个parentNode属性，它表示元素的父节点。Element的父节点可能是Element，Document或DocumentFragment。<br><code>parentElement</code>：返回元素的父元素节点，与parentNode的区别在于，其父节点必须是一个Element，如果不是，则返回null</p><h3 id="兄弟关系型api"><a href="#兄弟关系型api" class="headerlink" title="兄弟关系型api"></a>兄弟关系型api</h3><p><code>previousSibling</code>：节点的前一个节点，如果该节点是第一个节点，则为null。注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下。<br><code>previousElementSibling</code>：返回前一个元素节点，前一个节点必须是Element，注意IE9以下浏览器不支持。<br><code>nextSibling</code>：节点的后一个节点，如果该节点是最后一个节点，则为null。注意有可能拿到的节点是文本节点，与预期的不符，要进行处理一下。<br><code>nextElementSibling</code>：返回后一个元素节点，后一个节点必须是Element，注意IE9以下浏览器不支持。</p><h3 id="子关系型api"><a href="#子关系型api" class="headerlink" title="子关系型api"></a>子关系型api</h3><p><code>childNodes</code>：返回一个即时的NodeList，表示元素的子节点列表，子节点可能会包含文本节点，注释节点等。<br><code>children</code>：一个即时的HTMLCollection，子节点都是Element，IE9以下浏览器不支持。<br><code>firstNode</code>：第一个子节点<br><code>lastNode</code>：最后一个子节点<br><code>hasChildNodes</code>方法：可以<strong>用来判断是否包含子节点。</strong></p><h3 id="元素属性型api"><a href="#元素属性型api" class="headerlink" title="元素属性型api"></a>元素属性型api</h3><h3 id="setAttribute"><a href="#setAttribute" class="headerlink" title="setAttribute"></a>setAttribute</h3><p>根据名称和值修改元素的特性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">element.setAttribute(name, value);</span><br></pre></td></tr></table></figure><h3 id="getAttribute"><a href="#getAttribute" class="headerlink" title="getAttribute"></a>getAttribute</h3><p>返回指定的特性名相应的特性值，如果不存在，则返回null或空字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var value = element.getAttribute(&quot;id&quot;);</span><br></pre></td></tr></table></figure><h2 id="元素样式型api"><a href="#元素样式型api" class="headerlink" title="元素样式型api"></a>元素样式型api</h2><h3 id="window-getComputedStyle"><a href="#window-getComputedStyle" class="headerlink" title="window.getComputedStyle"></a>window.getComputedStyle</h3><p>用来获取应用到元素后的样式，假设某个元素并未设置高度而是通过其内容将其高度撑开，这时候要获取它的高度就要用到getComputedStyle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var style = window.getComputedStyle(element[, pseudoElt]);</span><br></pre></td></tr></table></figure><h3 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect"></a>getBoundingClientRect</h3><p>返回元素的大小以及相对于浏览器可视窗口的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var clientRect = element.getBoundingClientRect();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>原型与原型链</title>
      <link href="/2019/07/06/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2019/07/06/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="全局对象-window"><a href="#全局对象-window" class="headerlink" title="全局对象 window"></a>全局对象 window</h2><p><strong>window 的属性就是全局变量。</strong><br><strong>window属性：</strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document" target="_blank" rel="noopener">window</a></p><h2 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h2><ol><li>Number<br><code>var n = new Number()</code>创建一个 Number 对象</li><li>String<br><code>var s = new String(&#39;hello&#39;)</code> 创建一个 String 对象</li><li>Boolean<br><code>var b = new Boolean(true)</code> 创建一个 Boolean 对象</li><li>Object<br><code>var o1 = {}</code> 创建一个 Object 对象<br><code>(var o2 = new Object()</code> 创建一个 Object 对象</li></ol><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p><strong>重要公式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var 对象 = new 函数()</span><br><span class="line"></span><br><span class="line">对象.__proto__ === 对象的构造函数.prototype</span><br><span class="line"></span><br><span class="line">// 推论</span><br><span class="line"></span><br><span class="line">var number = new Number()</span><br><span class="line"></span><br><span class="line">number.__proto__ = Number.prototype</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var object = new Object()</span><br><span class="line"></span><br><span class="line">object.__proto__ = Object.prototype</span><br><span class="line"></span><br><span class="line">var function = new Function()</span><br><span class="line"></span><br><span class="line">function.__proto__ = Function.prototype</span><br><span class="line"></span><br><span class="line">// 另外，所有函数都是由 Function 构造出来的，所以</span><br><span class="line"></span><br><span class="line">Number.__proto__ = Function.prototype // 因为 Number 是函数，是 Function 的实例</span><br><span class="line"></span><br><span class="line">Object.__proto__ = Function.prototype // 因为 Object 是函数，是 Function 的实例</span><br><span class="line"></span><br><span class="line">Function.__proto__ == Function.prototye // 因为 Function 是函数，是 Function 的实例！</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>JS里的数据类型转换</title>
      <link href="/2019/07/05/JS%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2019/07/05/JS%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="任意类型转字符串"><a href="#任意类型转字符串" class="headerlink" title="任意类型转字符串"></a>任意类型转字符串</h2><h3 id="String-x"><a href="#String-x" class="headerlink" title="String(x)"></a>String(x)</h3><p><img src="https://static.xiedaimala.com/FrpnWPAjH4_Zh1Ru58nEIC0I4onn" alt="图片"></p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p><img src="https://static.xiedaimala.com/FnbB3yikB790jzpavhE6eyqioUPP" alt="图片"></p><h3 id="0"><a href="#0" class="headerlink" title="+ 0"></a>+ 0</h3><p><img src="https://static.xiedaimala.com/FgaPxjEAu8-hzeBRnQ7jdHlZiw85" alt="图片"></p><h2 id="任意类型转为number"><a href="#任意类型转为number" class="headerlink" title="任意类型转为number"></a>任意类型转为number</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&apos;1&apos; -&gt; 1</span><br><span class="line">Number(&apos;1&apos;) === 1</span><br><span class="line">parseInt(&apos;1&apos;, 10) === 1</span><br><span class="line">parseFloat(&apos;1.23&apos;) === 1.23</span><br><span class="line">&apos;1&apos; + 0 === 1</span><br></pre></td></tr></table></figure><h2 id="任意类型转boolean"><a href="#任意类型转boolean" class="headerlink" title="任意类型转boolean"></a>任意类型转boolean</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Boolean(x)</span><br><span class="line">!!x</span><br></pre></td></tr></table></figure><h2 id="数据类型的false值"><a href="#数据类型的false值" class="headerlink" title="数据类型的false值"></a>数据类型的false值</h2><p> <code>0</code>、<code>NaN</code>、<code>false</code>、<code></code>、<code>undefined</code>、<code>null</code></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>JS里的数据类型</title>
      <link href="/2019/07/05/JS%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/07/05/JS%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript的七种数据类型"><a href="#JavaScript的七种数据类型" class="headerlink" title="JavaScript的七种数据类型"></a>JavaScript的七种数据类型</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>数值<code>number</code>、字符串<code>string</code>、布尔值<code>Boolean</code>、<code>symbol</code>、<code>undefined</code>、<code>null</code></p><h3 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h3><p>对象<code>object</code>— 狭义的对象<code>object</code>、数组<code>array</code>、函数<code>function</code></p><h2 id="null-和-undefined的区别"><a href="#null-和-undefined的区别" class="headerlink" title="null 和 undefined的区别"></a>null 和 undefined的区别</h2><ul><li>当变量没有赋值时— undefined</li><li>有对象<code>object</code>,但还没赋值 — null</li><li>有非对象<code>object</code>,不想赋值 — undefined</li></ul><h3 id="JavaScript三种方法确定数据类型"><a href="#JavaScript三种方法确定数据类型" class="headerlink" title="JavaScript三种方法确定数据类型"></a>JavaScript三种方法确定数据类型</h3><ol><li><p>typeof运算符</p></li><li><p>instanceof运算符</p></li><li><p>Object.prototype.toString方法</p></li></ol><h2 id="JavaScript内容详细内容"><a href="#JavaScript内容详细内容" class="headerlink" title="JavaScript内容详细内容"></a>JavaScript内容详细内容</h2><p>1、<a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener">阮一峰JavaScript教程</a><br>2、<a href="http://javascript.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>CSS布局</title>
      <link href="/2018/12/11/CSS%E5%B8%83%E5%B1%80/"/>
      <url>/2018/12/11/CSS%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="本文主要包括以下内容："><a href="#本文主要包括以下内容：" class="headerlink" title="本文主要包括以下内容："></a>本文主要包括以下内容：</h2><ol><li>左右布局</li><li>左中右布局</li><li>水平居中</li><li>垂直居中</li><li>等其他小技巧</li></ol><h3 id="1、左右布局（两栏布局）"><a href="#1、左右布局（两栏布局）" class="headerlink" title="1、左右布局（两栏布局）"></a>1、左右布局（两栏布局）</h3><ul><li>两栏布局： <strong>一栏定宽，一栏自适应</strong>。</li><li>链接:<br><a href="http://js.jirengu.com/ruzogewubi/1/edit?html,css,output" target="_blank" rel="noopener">两栏布局</a></li></ul><h3 id="2、左中右布局-三栏布局"><a href="#2、左中右布局-三栏布局" class="headerlink" title="2、左中右布局(三栏布局)"></a>2、左中右布局(三栏布局)</h3><ul><li>三栏布局：<strong>两边定宽，然后中间的width是auto自适应内容</strong>。</li><li>链接:<br><a href="http://js.jirengu.com/dezilezuke/1/edit?html,css,output" target="_blank" rel="noopener">三栏布局</a></li></ul><h3 id="3、水平居中"><a href="#3、水平居中" class="headerlink" title="3、水平居中"></a>3、水平居中</h3><ul><li>flex实现水平居中: <strong>Flexbox布局自适应调整和分布一个容器里的项目布局，即使他们的大小是未知或者是动态的</strong>。</li><li>链接:<br><a href="http://js.jirengu.com/wisegaguco/1/edit?html,css,output" target="_blank" rel="noopener">flex水平居中</a></li></ul><h3 id="4、垂直居中"><a href="#4、垂直居中" class="headerlink" title="4、垂直居中"></a>4、垂直居中</h3><ul><li>绝对定位与负边距实现: <strong>利用绝对定位，将元素的top和left属性都设为50%，再利用margin边距，将元素回拉它本身高宽的一半，实现垂直居中。</strong></li><li>链接:<br><a href="http://js.jirengu.com/nolikenemi/1/edit?html,css,output" target="_blank" rel="noopener">绝对定位与负边距实现</a></li><li>绝对定位与margin: <strong>利用绝对定位与margin，但是无需知道被垂直居中元素的高和宽</strong>。</li><li>链接:<br><a href="http://js.jirengu.com/huzetituqu/1/edit" target="_blank" rel="noopener">绝对定位与margin</a></li></ul><h3 id="5、等其他小技巧"><a href="#5、等其他小技巧" class="headerlink" title="5、等其他小技巧"></a>5、等其他小技巧</h3><ul><li>水平垂直居中(flex布局)</li><li>链接<br><a href="http://js.jirengu.com/limoyefato/1/edit?html,css,output" target="_blank" rel="noopener">水平垂直居中flex布局</a></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>CSS</title>
      <link href="/2018/12/10/CSS/"/>
      <url>/2018/12/10/CSS/</url>
      
        <content type="html"><![CDATA[<h2 id="本文主要包括以下内容："><a href="#本文主要包括以下内容：" class="headerlink" title="本文主要包括以下内容："></a>本文主要包括以下内容：</h2><ol><li>高度是由什么决定的?</li><li>line-box 是啥?</li><li>box 是啥（盒模型）?</li><li>宽度是由什么决定的?</li><li>position 的 5 个取值</li><li>z-index</li></ol><h3 id="1、高度是由什么决定的"><a href="#1、高度是由什么决定的" class="headerlink" title="1、高度是由什么决定的?"></a>1、高度是由什么决定的?</h3><ul><li><strong>内联元素</strong> (自左往右,自动换行，但如果内联元素是一个很长的英文单词，则不会分开换行)<br><code>内联元素的高是由字体设计师决定</code> </li><li><strong>块级元素</strong> (从上往下，占据整行)<br><code>块级元素的高度由其内部文档流元素的高度总分决定的</code></li></ul><h3 id="2、line-box-是啥"><a href="#2、line-box-是啥" class="headerlink" title="2、line-box 是啥?"></a>2、line-box 是啥?</h3><ul><li>每一行称为一条Line Box，它又是由这一行的许多<strong>inline-box组成，它的高度可以直接由line-height决定</strong>，line boxes的高度垂直堆叠形成了containing box的高度，就是我们见到的div或是p标签之类的高度了。</li></ul><h3 id="3、box-是啥（盒模型）"><a href="#3、box-是啥（盒模型）" class="headerlink" title="3、box 是啥（盒模型）?"></a>3、box 是啥（盒模型）?</h3><ul><li>盒模型对比<br><img src="http://upload-images.jianshu.io/upload_images/6970717-2046f9172e7c0e58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="盒模型对比.png"><br><code>W3C标准中padding、border所占的空间不在width、height范围内，大家俗称的IE的盒模型width包括content尺寸＋padding＋border</code></li></ul><h3 id="4、宽度是由什么决定的"><a href="#4、宽度是由什么决定的" class="headerlink" title="4、宽度是由什么决定的?"></a>4、宽度是由什么决定的?</h3><ul><li><strong>行内元素</strong>的宽度是由它的<strong>内容</strong>决定的，行内元素不能设置宽高</li><li><strong>块级元素</strong>当没有设置宽度是<strong>默认100%宽</strong>，当设置了宽度是就是固定的宽度 </li></ul><h3 id="5、position-的-5-个取值"><a href="#5、position-的-5-个取值" class="headerlink" title="5、position 的 5 个取值"></a>5、position 的 5 个取值</h3><ul><li>sticky</li><li>absolute</li><li>fixed</li><li>relative</li><li>static</li></ul><h3 id="6、z-index"><a href="#6、z-index" class="headerlink" title="6、z-index"></a>6、z-index</h3><ul><li><strong>z-index 属性指定了一个具有定位属性的元素及其子代元素的 z-order。 当元素之间重叠的时候，z-order 决定哪一个元素覆盖在其余元素的上方显示。 通常来说 z-index 较大的元素会覆盖较小的一个。</strong></li><li>链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/z-index" target="_blank" rel="noopener">z-index标签</a></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>HTML_Common</title>
      <link href="/2018/12/09/HTML-Common/"/>
      <url>/2018/12/09/HTML-Common/</url>
      
        <content type="html"><![CDATA[<h2 id="本文主要包括以下内容："><a href="#本文主要包括以下内容：" class="headerlink" title="本文主要包括以下内容："></a>本文主要包括以下内容：</h2><ol><li>iframe 标签</li><li>a 标签</li><li>form 标签</li><li>input / button标签</li><li>table 标签</li></ol><h3 id="1、iframe-标签"><a href="#1、iframe-标签" class="headerlink" title="1、iframe 标签"></a>1、iframe 标签</h3><ul><li>嵌套页面<br><code>&lt;iframe src=&quot;https://www.baidu.com&quot; name=&quot;xxx&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</code></li><li>常用和<code>&lt;a&gt;</code>使用<br><code>&lt;a href=&quot;https://qq.com&quot; target=xxx&gt;</code></li></ul><h3 id="2、a-标签"><a href="#2、a-标签" class="headerlink" title="2、a 标签"></a>2、a 标签</h3><ul><li>跳转页面（<strong>HTTP GET 请求</strong>）</li><li>属性：</li><li>链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a" target="_blank" rel="noopener">a标签</a></li></ul><h3 id="3、form-标签"><a href="#3、form-标签" class="headerlink" title="3、form 标签"></a>3、form 标签</h3><ul><li>跳转页面（<strong>HTTP POST 请求</strong>）</li><li>属性：</li><li>链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form" target="_blank" rel="noopener">form标签</a></li></ul><h3 id="4、input-button标签"><a href="#4、input-button标签" class="headerlink" title="4、input / button标签"></a>4、input / button标签</h3><ul><li><strong>区别</strong>：是否为「空标签」</li><li>input 的属性如：</li><li>链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input" target="_blank" rel="noopener">input标签</a></li></ul><blockquote><p><code>&lt;input type=&quot;text&quot;&gt;</code><br><code>&lt;input type=&quot;password&quot;&gt;</code><br><code>&lt;input type=&quot;submit&quot;&gt;</code><br><code>&lt;input type=&quot;checkbox&quot; value=&quot;xxx&quot;&gt;</code><br><code>&lt;input type=&quot;radio&quot; value=&quot;yyy&quot;&gt;</code></p></blockquote><ul><li>button 的属性如：</li><li>链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button" target="_blank" rel="noopener">button</a></li></ul><blockquote><p><code>&lt;button name=&quot;button&quot;&gt;Click me&lt;/button&gt;</code><br><code>&lt;button&gt;Click me&lt;/button&gt;</code></p></blockquote><h3 id="5、table-标签"><a href="#5、table-标签" class="headerlink" title="5、table 标签"></a>5、table 标签</h3><ul><li><strong>用于展示数据</strong></li><li>table 的属性：</li><li>链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/table" target="_blank" rel="noopener">table标签</a></li><li>table 实现标签:<br><code>tr --- table row</code>, <code>th --- table header cell</code>, <code>td --- table data cell</code></li><li><strong>知识点</strong>：<ul><li>空标签</li><li>可替换标签</li><li>全局属性</li><li>display 不止 3 种</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>HTML</title>
      <link href="/2018/12/08/HTML/"/>
      <url>/2018/12/08/HTML/</url>
      
        <content type="html"><![CDATA[<h2 id="本文主要包括以下内容："><a href="#本文主要包括以下内容：" class="headerlink" title="本文主要包括以下内容："></a>本文主要包括以下内容：</h2><ol><li>HTML 的版本</li><li>怎样理解 HTML 语义化</li><li>怎样理解内容与样式分离的原则</li><li>有哪些常见的meta标签</li><li>文档声明的作用?严格模式和混杂模式指什么?&lt;!doctype html&gt; 的作用?</li><li>浏览器乱码的原因是什么？如何解决?</li><li>常见的浏览器有哪些？什么内核？</li><li>列出常见的标签，并简单介绍这些标签用在什么场景</li></ol><h3 id="1、HTML-的版本"><a href="#1、HTML-的版本" class="headerlink" title="1、HTML 的版本"></a>1、HTML 的版本</h3><ul><li>HTML <code>超文本标记语言</code>（HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。</li><li>XML <code>可扩展标识语言</code>(The Extensible Markup Language)的简写，主要用于存储数据和结构。</li><li>XHTML <code>可扩展超文本标记语言</code> (The Extensible HyperText Markup Language)的缩写,基于XML，作用与HTML类似,目的就是实现HTML向XML的过渡。 </li></ul><h3 id="2、怎样理解-HTML-语义化"><a href="#2、怎样理解-HTML-语义化" class="headerlink" title="2、怎样理解 HTML 语义化"></a>2、怎样理解 HTML 语义化</h3><ul><li>语义化HTML是一种编写HTML的方式。</li><li>选择合适的标签、使用合理的代码结构，便于开发者阅读，同时让浏览器的爬虫和机器很好地解析。</li><li>语义化的好处:<ol><li>页面呈现出很好地<strong>内容结构、代码结构</strong>。</li><li><strong>用户体验好</strong>。</li><li>利于<strong>SEO优化</strong>。</li><li>方便其他设备<strong>解析</strong>来渲染网页。</li><li>便于<strong>团队开发和维护</strong>，语义化更具<strong>可读性</strong>。</li></ol></li></ul><h3 id="3、怎样理解内容与样式分离的原则"><a href="#3、怎样理解内容与样式分离的原则" class="headerlink" title="3、怎样理解内容与样式分离的原则"></a>3、怎样理解内容与样式分离的原则</h3><ul><li>在WEB开发中， 一个网页分为三部分：<code>Html——结构（内容）</code>，<code>css——表现（样式）</code>，<code>javascript——行为</code>。内容与样式分离，就是让内容的归 HTML, 样式归 CSS。同时，HTML 内不允许出现属性样式，尽量不要出现行内样式。</li><li>编码正确做法是HTML和CSS要分开使用，不要混着用。重点放在HTML的结构和语义化上，让HTML能提现页面结构或者内容,，然后进行 css 样式设置（即内容与样式分离） ，写JS的时候，尽量不要用JS去直接操作样式，而是通过给元素添加删除class来控制样式变化（即行为分离）。</li><li>分离原则的优点:<ol><li><strong>浏览器加载网页页面速度变快</strong>。分离原则下，大部分页面代码写在了CSS当中，页面体积容量变得更小。</li><li><strong>网页修改设计时，效率、省时</strong>。根据html标签内ID或class的标记，到CSS里找到相应的ID或class，可以快速替换指定位置的样式，不会破坏页面架构和其他部分的样式。</li><li><strong>典型的应用就是网页换肤</strong>。使用相同的 html 结构，不同的 CSS 样式。</li><li><strong>更好地被搜索引擎收录</strong>。基于内容与样式分离的原则，html的语义化就是首要考虑的,网页中语义化的标签代码就会更加适合搜索引擎。</li><li><strong>CSS样式的分离，它可以根据不同的浏览器，达到显示效果的统一</strong>。保证网页架构不变形的前提下，放心在不同浏览器渲染显示样式。</li></ol></li></ul><h3 id="4、有哪些常见的meta标签"><a href="#4、有哪些常见的meta标签" class="headerlink" title="4、有哪些常见的meta标签"></a>4、有哪些常见的meta标签</h3><ul><li><p>语言采用<strong>中文</strong><br><code>&lt;meta http-equiv=&quot;Content-Language&quot; content=&quot;zh-CN&quot; /&gt;</code></p></li><li><p>编码格式：<strong>告诉给浏览器用什么方式来解析这页代码</strong><br>  <code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></p></li><li>如果支持Google Chrome Frame：GCF，则使用GCF渲染；如果系统安装ie8或以上版本，则使用最高版本ie渲染； 否则，这个设定可以忽略。 目的<strong>使内容在移动端上比较合理展示</strong>。<br>  <code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;</code>    </li><li>控制网页为全屏幕大小<br>  <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&gt;</code></li><li>目的是方便<strong>SEO优化</strong>内容关键字搜索<br>  <code>&lt;meta name=&quot;keywords&quot; content=&quot;&quot;&gt;</code></li></ul><h3 id="5、文档声明的作用-严格模式和混杂模式指什么-lt-doctype-html-gt-的作用"><a href="#5、文档声明的作用-严格模式和混杂模式指什么-lt-doctype-html-gt-的作用" class="headerlink" title="5、文档声明的作用?严格模式和混杂模式指什么?&lt;!doctype html&gt; 的作用?"></a>5、文档声明的作用?严格模式和混杂模式指什么?&lt;!doctype html&gt; 的作用?</h3><ul><li>文档声明的作用<br>  <code>&lt;p&gt;文档声明目的是**防止出现乱码**情况。&lt;/p&gt;</code></li><li>严格模式和混杂模式指什么<br><strong>严格模式</strong>：又称标准模式，是指<strong>浏览器按照 W3C 标准解析代码</strong>。<br><strong>混杂模式</strong>：又称怪异模式或兼容模式，是指<strong>浏览器用自己的方式解析代码</strong>。<br>   <strong>区分</strong>    ：浏览器解析时到底使用严格模式还是混杂模式，与网页中的 <strong>DTD</strong> 直接相关。</li><li>关于&lt;!DOCTYPE html&gt;</li><li>关于<doctype>声明叫做文件类型定义（DTD），声明的作用<strong>为了告诉浏览器该文件的类型。让浏览器解析器知道应该用哪个规范来解析文档</strong>。</doctype></li></ul><h3 id="6、浏览器乱码的原因是什么？如何解决"><a href="#6、浏览器乱码的原因是什么？如何解决" class="headerlink" title="6、浏览器乱码的原因是什么？如何解决?"></a>6、浏览器乱码的原因是什么？如何解决?</h3><ul><li>html源代码内中文字内容与html编码不同造成。但无论是哪种情况造成乱码在网页开始时候都需要设置网页编码。</li><li>解决：<br>  <code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></li></ul><h3 id="7、常见的浏览器有哪些？什么内核？"><a href="#7、常见的浏览器有哪些？什么内核？" class="headerlink" title="7、常见的浏览器有哪些？什么内核？"></a>7、常见的浏览器有哪些？什么内核？</h3><ul><li>浏览器</li></ul><p><code>&lt;p&gt;chrome浏览器、火狐浏览器（Mozilla Firefox）、IE浏览器、360极速浏览器、搜狗浏览器、猎豹极轻浏览器等。&lt;/p&gt;</code></p><ul><li>内核<br>1、Trident(IE内核)；<br>2、Gecko(Firefox内核)；<br>3、Presto(Opera前内核) (已废弃)；<br>4、Webkit(Safari内核,Chrome内核原型,开源)。</li></ul><h3 id="8、列出常见的标签，并简单介绍这些标签用在什么场景"><a href="#8、列出常见的标签，并简单介绍这些标签用在什么场景" class="headerlink" title="8、列出常见的标签，并简单介绍这些标签用在什么场景"></a>8、列出常见的标签，并简单介绍这些标签用在什么场景</h3><ul><li><p><strong>注意点</strong><br>1、标签属性全小写;<br>2、标签要闭合、自闭合标签可以省略 /;<br>3、标题里不能有段落，段落里不能有标题;</p></li><li><p><code>h1~h6</code> 标题<br> <code>&lt;h1&gt;代表页面最大的标题&lt;/h1&gt;</code><br> <code>&lt;h2&gt;二级标题&lt;/h2&gt;</code><br> <code>&lt;h3&gt;更弱的标题&lt;/h3&gt;</code><br> <code>&lt;h4&gt;...&lt;/h4&gt;</code><br> <code>&lt;h5&gt;...&lt;/h5&gt;</code><br> <code>&lt;h6&gt;最小标题&lt;/h6&gt;</code></p></li><li><p><code>p</code>段落<br> <code>&lt;p&gt;表示大段文字&lt;/p&gt;</code></p></li><li><p><code>a</code>链接，链到一个地址</p><p> <code>&lt;a href=&quot;http://www.google.com&quot;&quot; target=&quot;_blank&quot; title=&quot;ABC&quot;&gt;google.com&lt;/a&gt;</code><br> <code>&lt;a href=&quot;#&quot;&gt;空&lt;/a&gt;</code><br> <code>&lt;a href=&quot;#about&quot;&gt;定位ID标签about位置&lt;/a&gt;</code><br> <code>&lt;a href=&quot;/getCourse&quot;&gt;链接路径地址&lt;/a&gt;</code></p></li><li><p><code>img</code>展示一张图片</p><p>   <img src="a.png" alt=""></p></li><li><p><code>div</code>语义为“一大块”，用于给页面划分区块，让结构更清晰<br>   <code>&lt;div id=&quot;header&quot;&gt;...&lt;/div&gt;</code><br>   <code>&lt;div id=&quot;content&quot;&gt;...&lt;/div&gt;</code><br>   <code>&lt;div id=&quot;footer&quot;&gt;...&lt;/div&gt;</code></p></li><li><p><code>ul li</code></p><ol><li>ul: unsort list 无序列表</li><li>用于表示并列的内容</li><li>ul的直接子元素是li</li><li>可以嵌套</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;ul class=&quot;nav&quot;&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;关于&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=&quot;#&quot;&gt;更多&lt;/a&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;联系&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;地址&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;·</span><br></pre></td></tr></table></figure><ul><li><code>ol li</code><ol><li>ol: order list 有序序列表 </li><li>用于表示带步骤或者编号的并列内容 </li><li>ol的直接子元素只能是li 可以嵌套</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;h2&gt;把大象关到冰箱的步骤&lt;/h2&gt;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">  &lt;li&gt;把大象变小&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;打开冰箱&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;把大象塞进去&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure><ul><li>dl dt dd用于展示一系列 “标题:内容… ”的场景</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;商品名称:&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;青花瓷&lt;/dd&gt;</span><br><span class="line">    &lt;dt&gt;特征:&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;白色&lt;/dd&gt;</span><br><span class="line">    &lt;dd&gt;圆口&lt;/dd&gt;</span><br><span class="line">    &lt;dt&gt;商品介绍&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;这是一个年代久远的瓷器，很贵，易碎&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure><ul><li><code>button</code>按钮</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;点我&lt;/button&gt;</span><br></pre></td></tr></table></figure><ul><li><p><code>strong em</code></p><ol><li>em 需要强调一下</li><li>strong 很重要、强调性更强</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;p&gt;优惠 &lt;strong&gt;100&lt;/strong&gt; 元&lt;/p&gt;</span><br><span class="line">&lt;p&gt;小谷 &lt;em&gt;2&lt;/em&gt; 岁了&lt;/p&gt;</span><br></pre></td></tr></table></figure><ul><li><p><code>iframe</code>用于嵌入一个页面 注意跨域操作问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;iframe src=&quot;http://www.google.com&quot; name=&quot;myPage&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;http://www.baidu.com&quot;&quot; target=&quot;myPage&quot;&gt;baidu.com&lt;/a&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>table</code>用于展示表格，不要用来做布局 thead tbody tfoot可省略，浏览器会自动添加 border-collapse: collapse;用于合并边框</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">  &lt;th&gt;年纪&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;小明&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;18&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;小花&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;20&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>HTTP</title>
      <link href="/2018/12/07/HTTP/"/>
      <url>/2018/12/07/HTTP/</url>
      
        <content type="html"><![CDATA[<h2 id="本文主要包括以下内容："><a href="#本文主要包括以下内容：" class="headerlink" title="本文主要包括以下内容："></a>本文主要包括以下内容：</h2><ol><li><p>HTTP是什么？</p></li><li><p>HTTP 请求包括哪些部分？</p></li><li><p>HTTP 响应包括哪些部分？</p></li><li><p>如何用Chrome开发者工具查看 HTTP 请求及请求的内容？</p></li><li><p>如何使用 curl 命令？</p></li></ol><h3 id="1、HTTP是什么"><a href="#1、HTTP是什么" class="headerlink" title="1、HTTP是什么?"></a>1、HTTP是什么?</h3><ul><li><p><code>HTTP</code> 全称：HyperText Transfer Protocol，即超文本传输协议<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">HTTP</a>的作用。</p></li><li><p><code>HTTP作用</code> : 指导浏览器和服务器之间进行沟通。</p></li></ul><h3 id="2、HTTP-请求包括哪些部分？"><a href="#2、HTTP-请求包括哪些部分？" class="headerlink" title="2、HTTP 请求包括哪些部分？"></a>2、HTTP 请求包括哪些部分？</h3><ul><li>HTTP请求主要包括四部分（第四部分可以为空），主要格式如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1 动词 路径 协议/版本</span><br><span class="line"></span><br><span class="line">2 Key1: value1</span><br><span class="line"></span><br><span class="line">2 Key2: value2</span><br><span class="line"></span><br><span class="line">2 Key3: value3</span><br><span class="line"></span><br><span class="line">2 Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">2 Host: www.baidu.com</span><br><span class="line"></span><br><span class="line">2 User-Agent: curl/7.54.0</span><br><span class="line"></span><br><span class="line">3 </span><br><span class="line"></span><br><span class="line">4 要上传的数据</span><br></pre></td></tr></table></figure><h3 id="3、HTTP-响应包括哪些部分？"><a href="#3、HTTP-响应包括哪些部分？" class="headerlink" title="3、HTTP 响应包括哪些部分？"></a>3、HTTP 响应包括哪些部分？</h3><ul><li>HTTP响应主要包括四部分（第四部分可以为空），主要格式如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1 协议/版本号 状态码 状态解释</span><br><span class="line">2 Key1: value1</span><br><span class="line">2 Key2: value2</span><br><span class="line">2 Content-Length: 17931</span><br><span class="line">2 Content-Type: text/html</span><br><span class="line">3</span><br><span class="line">4 要下载的内容</span><br></pre></td></tr></table></figure><h3 id="4、如何用Chrome开发者工具查看-HTTP-请求及响应的内容？"><a href="#4、如何用Chrome开发者工具查看-HTTP-请求及响应的内容？" class="headerlink" title="4、如何用Chrome开发者工具查看 HTTP 请求及响应的内容？"></a>4、如何用Chrome开发者工具查看 HTTP 请求及响应的内容？</h3><ul><li>eg：用<strong>Chrome</strong>发请求</li></ul><ol><li>打开 Network</li><li>地址栏输入网址</li><li>在 Network 点击，查看 request，点击「view source」</li><li>点击「view source」可查看请求的前三部分</li><li>如果有请求的第四部分，那么在 FormData 或 Payload 里面可以看到</li></ol><ul><li>用<strong>Chrome</strong>查看响应</li></ul><ol><li>打开 Network</li><li>输入网址</li><li>选中第一个响应</li><li>查看 Response Headers，点击「view source」</li><li>查看响应的前两部分</li><li>查看 Response 或者 Preview，你会看到响应的第 4 部分</li></ol><h3 id="5、如何使用-curl-命令？"><a href="#5、如何使用-curl-命令？" class="headerlink" title="5、如何使用 curl 命令？"></a>5、如何使用 curl 命令？</h3><ul><li><code>Curl</code>是Linux下一个很强大的http命令行工具。</li><li>curl的基本用途：创造一个请求，并得到响应，主要如下图：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">curl -s -v -H &quot;Nola: xxx&quot; -- &quot;https://www.baidu.com&quot;</span><br><span class="line">请求内容：</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: curl/7.54.0</span><br><span class="line">Accept: */*</span><br><span class="line">Nola: xxx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">curl -X POST -s -v -H &quot;Nola: xxx&quot; -- &quot;https://www.baidu.com&quot;</span><br><span class="line">请求内容：</span><br><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: curl/7.54.0</span><br><span class="line">Accept: */*</span><br><span class="line">Nola: xxx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">curl -X POST -d &quot;1234567890&quot; -s -v -H &quot;Nola: xxx&quot; -- &quot;https://www.baidu.com&quot;</span><br><span class="line">请求内容：</span><br><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: curl/7.54.0</span><br><span class="line">Accept: */*</span><br><span class="line">Nola: xxx</span><br><span class="line">Content-Length: 10</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>开博大吉</title>
      <link href="/2018/12/07/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/"/>
      <url>/2018/12/07/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</url>
      
        <content type="html"><![CDATA[<h3 id="学习记录前端小知识"><a href="#学习记录前端小知识" class="headerlink" title="学习记录前端小知识"></a>学习记录前端小知识</h3>]]></content>
      
      
      
    </entry>
    
  
  
</search>
